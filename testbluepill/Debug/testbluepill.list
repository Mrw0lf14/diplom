
testbluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004628  08004628  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004628  08004628  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004628  08004628  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800462c  0800462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000335c  20000070  080046a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200033cc  080046a0  000233cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaf4  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002360  00000000  00000000  0002eb8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00030ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00031c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e97  00000000  00000000  00032858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0e1  00000000  00000000  0004b6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba83  00000000  00000000  000597d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5253  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004018  00000000  00000000  000e52a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080044a4 	.word	0x080044a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080044a4 	.word	0x080044a4

0800014c <HAL_SPI_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    // TX Done .. Do Something ...
	DMA_Flag = 1;
 8000154:	4b03      	ldr	r3, [pc, #12]	; (8000164 <HAL_SPI_TxCpltCallback+0x18>)
 8000156:	2201      	movs	r2, #1
 8000158:	701a      	strb	r2, [r3, #0]
}
 800015a:	bf00      	nop
 800015c:	370c      	adds	r7, #12
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	200032cc 	.word	0x200032cc

08000168 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
	timFlag = 1;
 8000170:	4b05      	ldr	r3, [pc, #20]	; (8000188 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000172:	2201      	movs	r2, #1
 8000174:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800017a:	4804      	ldr	r0, [pc, #16]	; (800018c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800017c:	f001 fd7b 	bl	8001c76 <HAL_GPIO_TogglePin>
}
 8000180:	bf00      	nop
 8000182:	3708      	adds	r7, #8
 8000184:	46bd      	mov	sp, r7
 8000186:	bd80      	pop	{r7, pc}
 8000188:	200000c0 	.word	0x200000c0
 800018c:	40011000 	.word	0x40011000

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f001 f839 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f83d 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f91f 	bl	80003e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80001a2:	f000 f8ff 	bl	80003a4 <MX_DMA_Init>
  MX_SPI1_Init();
 80001a6:	f000 f879 	bl	800029c <MX_SPI1_Init>

  MX_TIM2_Init();
 80001aa:	f000 f8ad 	bl	8000308 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80001ae:	4818      	ldr	r0, [pc, #96]	; (8000210 <main+0x80>)
 80001b0:	f002 fd62 	bl	8002c78 <HAL_TIM_Base_Start_IT>
  //MX_DMA_Init();
  //MX_SPI1_Init();
  TFT9341_ini(240, 320);
 80001b4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80001b8:	20f0      	movs	r0, #240	; 0xf0
 80001ba:	f000 fb5d 	bl	8000878 <TFT9341_ini>
  while(1){
	  HAL_SPI_Transmit_DMA(&hspi1, buf, sizeof(buf));
  }
  */

  TFT9341_FillScreen(TFT9341_WHITE);
 80001be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80001c2:	f000 fe13 	bl	8000dec <TFT9341_FillScreen>
  //стресс тест
  srand(13);
 80001c6:	200d      	movs	r0, #13
 80001c8:	f003 f932 	bl	8003430 <srand>
  for(uint8_t step = 0; step <= 100;step++){
 80001cc:	2300      	movs	r3, #0
 80001ce:	71fb      	strb	r3, [r7, #7]
 80001d0:	e014      	b.n	80001fc <main+0x6c>
	  TFT9341_FillScreen(rand() % 0xFFFF);
 80001d2:	f003 f95b 	bl	800348c <rand>
 80001d6:	4602      	mov	r2, r0
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <main+0x84>)
 80001da:	fb83 1302 	smull	r1, r3, r3, r2
 80001de:	4413      	add	r3, r2
 80001e0:	13d9      	asrs	r1, r3, #15
 80001e2:	17d3      	asrs	r3, r2, #31
 80001e4:	1ac9      	subs	r1, r1, r3
 80001e6:	460b      	mov	r3, r1
 80001e8:	041b      	lsls	r3, r3, #16
 80001ea:	1a5b      	subs	r3, r3, r1
 80001ec:	1ad1      	subs	r1, r2, r3
 80001ee:	b28b      	uxth	r3, r1
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 fdfb 	bl	8000dec <TFT9341_FillScreen>
  for(uint8_t step = 0; step <= 100;step++){
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	3301      	adds	r3, #1
 80001fa:	71fb      	strb	r3, [r7, #7]
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	2b64      	cmp	r3, #100	; 0x64
 8000200:	d9e7      	bls.n	80001d2 <main+0x42>
  }
  HAL_Delay(500);
 8000202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000206:	f001 f863 	bl	80012d0 <HAL_Delay>
  SnakeMain();
 800020a:	f000 faf3 	bl	80007f4 <SnakeMain>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020e:	e7fe      	b.n	800020e <main+0x7e>
 8000210:	20003328 	.word	0x20003328
 8000214:	80008001 	.word	0x80008001

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b090      	sub	sp, #64	; 0x40
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f003 f8fa 	bl	8003420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800023a:	2302      	movs	r3, #2
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000242:	2310      	movs	r3, #16
 8000244:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800024a:	2300      	movs	r3, #0
 800024c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800024e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000252:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000254:	f107 0318 	add.w	r3, r7, #24
 8000258:	4618      	mov	r0, r3
 800025a:	f001 fd25 	bl	8001ca8 <HAL_RCC_OscConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000264:	f000 f93e 	bl	80004e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000268:	230f      	movs	r3, #15
 800026a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026c:	2302      	movs	r3, #2
 800026e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2102      	movs	r1, #2
 8000282:	4618      	mov	r0, r3
 8000284:	f001 ff90 	bl	80021a8 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800028e:	f000 f929 	bl	80004e4 <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	; 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002a0:	4b17      	ldr	r3, [pc, #92]	; (8000300 <MX_SPI1_Init+0x64>)
 80002a2:	4a18      	ldr	r2, [pc, #96]	; (8000304 <MX_SPI1_Init+0x68>)
 80002a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002a6:	4b16      	ldr	r3, [pc, #88]	; (8000300 <MX_SPI1_Init+0x64>)
 80002a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002ae:	4b14      	ldr	r3, [pc, #80]	; (8000300 <MX_SPI1_Init+0x64>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <MX_SPI1_Init+0x64>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002ba:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_SPI1_Init+0x64>)
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <MX_SPI1_Init+0x64>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_SPI1_Init+0x64>)
 80002c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_SPI1_Init+0x64>)
 80002d0:	2208      	movs	r2, #8
 80002d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002d4:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <MX_SPI1_Init+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_SPI1_Init+0x64>)
 80002dc:	2200      	movs	r2, #0
 80002de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <MX_SPI1_Init+0x64>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002e6:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_SPI1_Init+0x64>)
 80002e8:	220a      	movs	r2, #10
 80002ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002ec:	4804      	ldr	r0, [pc, #16]	; (8000300 <MX_SPI1_Init+0x64>)
 80002ee:	f002 f8c3 	bl	8002478 <HAL_SPI_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002f8:	f000 f8f4 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	200032d0 	.word	0x200032d0
 8000304:	40013000 	.word	0x40013000

08000308 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800030e:	f107 0308 	add.w	r3, r7, #8
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800031c:	463b      	mov	r3, r7
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000324:	4b1e      	ldr	r3, [pc, #120]	; (80003a0 <MX_TIM2_Init+0x98>)
 8000326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800032a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 800032c:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <MX_TIM2_Init+0x98>)
 800032e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000332:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_TIM2_Init+0x98>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 300;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <MX_TIM2_Init+0x98>)
 800033c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000340:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <MX_TIM2_Init+0x98>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_TIM2_Init+0x98>)
 800034a:	2200      	movs	r2, #0
 800034c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800034e:	4814      	ldr	r0, [pc, #80]	; (80003a0 <MX_TIM2_Init+0x98>)
 8000350:	f002 fc42 	bl	8002bd8 <HAL_TIM_Base_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800035a:	f000 f8c3 	bl	80004e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800035e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000362:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000364:	f107 0308 	add.w	r3, r7, #8
 8000368:	4619      	mov	r1, r3
 800036a:	480d      	ldr	r0, [pc, #52]	; (80003a0 <MX_TIM2_Init+0x98>)
 800036c:	f002 fdde 	bl	8002f2c <HAL_TIM_ConfigClockSource>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000376:	f000 f8b5 	bl	80004e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800037a:	2300      	movs	r3, #0
 800037c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800037e:	2300      	movs	r3, #0
 8000380:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000382:	463b      	mov	r3, r7
 8000384:	4619      	mov	r1, r3
 8000386:	4806      	ldr	r0, [pc, #24]	; (80003a0 <MX_TIM2_Init+0x98>)
 8000388:	f002 ffb0 	bl	80032ec <HAL_TIMEx_MasterConfigSynchronization>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000392:	f000 f8a7 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	3718      	adds	r7, #24
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20003328 	.word	0x20003328

080003a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_DMA_Init+0x38>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <MX_DMA_Init+0x38>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_DMA_Init+0x38>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2100      	movs	r1, #0
 80003c6:	200d      	movs	r0, #13
 80003c8:	f001 f87d 	bl	80014c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80003cc:	200d      	movs	r0, #13
 80003ce:	f001 f896 	bl	80014fe <HAL_NVIC_EnableIRQ>

}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f4:	4b37      	ldr	r3, [pc, #220]	; (80004d4 <MX_GPIO_Init+0xf4>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a36      	ldr	r2, [pc, #216]	; (80004d4 <MX_GPIO_Init+0xf4>)
 80003fa:	f043 0310 	orr.w	r3, r3, #16
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b34      	ldr	r3, [pc, #208]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0310 	and.w	r3, r3, #16
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040c:	4b31      	ldr	r3, [pc, #196]	; (80004d4 <MX_GPIO_Init+0xf4>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a30      	ldr	r2, [pc, #192]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b2e      	ldr	r3, [pc, #184]	; (80004d4 <MX_GPIO_Init+0xf4>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0304 	and.w	r3, r3, #4
 8000420:	60bb      	str	r3, [r7, #8]
 8000422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000424:	4b2b      	ldr	r3, [pc, #172]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a2a      	ldr	r2, [pc, #168]	; (80004d4 <MX_GPIO_Init+0xf4>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b28      	ldr	r3, [pc, #160]	; (80004d4 <MX_GPIO_Init+0xf4>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0308 	and.w	r3, r3, #8
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000442:	4825      	ldr	r0, [pc, #148]	; (80004d8 <MX_GPIO_Init+0xf8>)
 8000444:	f001 fbff 	bl	8001c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2110      	movs	r1, #16
 800044c:	4823      	ldr	r0, [pc, #140]	; (80004dc <MX_GPIO_Init+0xfc>)
 800044e:	f001 fbfa 	bl	8001c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	2103      	movs	r1, #3
 8000456:	4822      	ldr	r0, [pc, #136]	; (80004e0 <MX_GPIO_Init+0x100>)
 8000458:	f001 fbf5 	bl	8001c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800045c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046a:	2302      	movs	r3, #2
 800046c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4619      	mov	r1, r3
 8000474:	4818      	ldr	r0, [pc, #96]	; (80004d8 <MX_GPIO_Init+0xf8>)
 8000476:	f001 fa4b 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_BUTTON_Pin DOWN_BUTTON_Pin */
  GPIO_InitStruct.Pin = UP_BUTTON_Pin|DOWN_BUTTON_Pin;
 800047a:	2303      	movs	r3, #3
 800047c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000482:	2301      	movs	r3, #1
 8000484:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	4619      	mov	r1, r3
 800048c:	4813      	ldr	r0, [pc, #76]	; (80004dc <MX_GPIO_Init+0xfc>)
 800048e:	f001 fa3f 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin;
 8000492:	2310      	movs	r3, #16
 8000494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	2301      	movs	r3, #1
 8000498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2302      	movs	r3, #2
 80004a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TFT_DC_GPIO_Port, &GPIO_InitStruct);
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	4619      	mov	r1, r3
 80004a8:	480c      	ldr	r0, [pc, #48]	; (80004dc <MX_GPIO_Init+0xfc>)
 80004aa:	f001 fa31 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin;
 80004ae:	2303      	movs	r3, #3
 80004b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b2:	2301      	movs	r3, #1
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ba:	2302      	movs	r3, #2
 80004bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	4806      	ldr	r0, [pc, #24]	; (80004e0 <MX_GPIO_Init+0x100>)
 80004c6:	f001 fa23 	bl	8001910 <HAL_GPIO_Init>

}
 80004ca:	bf00      	nop
 80004cc:	3720      	adds	r7, #32
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40011000 	.word	0x40011000
 80004dc:	40010800 	.word	0x40010800
 80004e0:	40010c00 	.word	0x40010c00

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e8:	b672      	cpsid	i
}
 80004ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ec:	e7fe      	b.n	80004ec <Error_Handler+0x8>
	...

080004f0 <SnakeUpdatePos>:
//#include "stm32f1xx_hal.h"
#include "snake.h"

void SnakeUpdatePos(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
	for (uint16_t i = snakeCount; i >= 1; i--) {
 80004f6:	4b23      	ldr	r3, [pc, #140]	; (8000584 <SnakeUpdatePos+0x94>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	80fb      	strh	r3, [r7, #6]
 80004fc:	e018      	b.n	8000530 <SnakeUpdatePos+0x40>
		snake[i].x = snake[i - 1].x;
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	1e5a      	subs	r2, r3, #1
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	4920      	ldr	r1, [pc, #128]	; (8000588 <SnakeUpdatePos+0x98>)
 8000506:	f911 1012 	ldrsb.w	r1, [r1, r2, lsl #1]
 800050a:	4a1f      	ldr	r2, [pc, #124]	; (8000588 <SnakeUpdatePos+0x98>)
 800050c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		snake[i].y = snake[i - 1].y;
 8000510:	88fb      	ldrh	r3, [r7, #6]
 8000512:	3b01      	subs	r3, #1
 8000514:	88fa      	ldrh	r2, [r7, #6]
 8000516:	491c      	ldr	r1, [pc, #112]	; (8000588 <SnakeUpdatePos+0x98>)
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	440b      	add	r3, r1
 800051c:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8000520:	4919      	ldr	r1, [pc, #100]	; (8000588 <SnakeUpdatePos+0x98>)
 8000522:	0053      	lsls	r3, r2, #1
 8000524:	440b      	add	r3, r1
 8000526:	4602      	mov	r2, r0
 8000528:	705a      	strb	r2, [r3, #1]
	for (uint16_t i = snakeCount; i >= 1; i--) {
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	3b01      	subs	r3, #1
 800052e:	80fb      	strh	r3, [r7, #6]
 8000530:	88fb      	ldrh	r3, [r7, #6]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d1e3      	bne.n	80004fe <SnakeUpdatePos+0xe>
	}
	snake[0].x += vx;
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <SnakeUpdatePos+0x98>)
 8000538:	f993 3000 	ldrsb.w	r3, [r3]
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <SnakeUpdatePos+0x9c>)
 8000540:	f993 3000 	ldrsb.w	r3, [r3]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	4413      	add	r3, r2
 8000548:	b2db      	uxtb	r3, r3
 800054a:	b25a      	sxtb	r2, r3
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <SnakeUpdatePos+0x98>)
 800054e:	701a      	strb	r2, [r3, #0]
	snake[0].y += vy;
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <SnakeUpdatePos+0x98>)
 8000552:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <SnakeUpdatePos+0xa0>)
 800055a:	f993 3000 	ldrsb.w	r3, [r3]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	4413      	add	r3, r2
 8000562:	b2db      	uxtb	r3, r3
 8000564:	b25a      	sxtb	r2, r3
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <SnakeUpdatePos+0x98>)
 8000568:	705a      	strb	r2, [r3, #1]


	if(snake[0].x > FIELDSIZE){
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <SnakeUpdatePos+0x98>)
 800056c:	f993 3000 	ldrsb.w	r3, [r3]
 8000570:	2b10      	cmp	r3, #16
 8000572:	dd02      	ble.n	800057a <SnakeUpdatePos+0x8a>
		snake[0].x = 0;
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <SnakeUpdatePos+0x98>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
	}
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	200000c1 	.word	0x200000c1
 8000588:	20000098 	.word	0x20000098
 800058c:	200000c4 	.word	0x200000c4
 8000590:	200019c8 	.word	0x200019c8

08000594 <SnakeCheckApple>:

void SnakeCheckApple(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	if(snake[0].x == apple.x && snake[0].y == apple.y){
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SnakeCheckApple+0x90>)
 800059a:	f993 2000 	ldrsb.w	r2, [r3]
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <SnakeCheckApple+0x94>)
 80005a0:	f993 3000 	ldrsb.w	r3, [r3]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d13b      	bne.n	8000620 <SnakeCheckApple+0x8c>
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <SnakeCheckApple+0x90>)
 80005aa:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80005ae:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <SnakeCheckApple+0x94>)
 80005b0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d133      	bne.n	8000620 <SnakeCheckApple+0x8c>
		snakeCount += 1;
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <SnakeCheckApple+0x98>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <SnakeCheckApple+0x98>)
 80005c2:	701a      	strb	r2, [r3, #0]
		snake[snakeCount].x = snake[0].x;
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <SnakeCheckApple+0x98>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <SnakeCheckApple+0x90>)
 80005cc:	f993 1000 	ldrsb.w	r1, [r3]
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <SnakeCheckApple+0x90>)
 80005d2:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
			snake[snakeCount].y = snake[0].y;
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <SnakeCheckApple+0x98>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <SnakeCheckApple+0x90>)
 80005de:	f993 1001 	ldrsb.w	r1, [r3, #1]
 80005e2:	4a10      	ldr	r2, [pc, #64]	; (8000624 <SnakeCheckApple+0x90>)
 80005e4:	0043      	lsls	r3, r0, #1
 80005e6:	4413      	add	r3, r2
 80005e8:	460a      	mov	r2, r1
 80005ea:	705a      	strb	r2, [r3, #1]
			apple.x = rand()%FIELDSIZE;
 80005ec:	f002 ff4e 	bl	800348c <rand>
 80005f0:	4603      	mov	r3, r0
 80005f2:	425a      	negs	r2, r3
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	f002 020f 	and.w	r2, r2, #15
 80005fc:	bf58      	it	pl
 80005fe:	4253      	negpl	r3, r2
 8000600:	b25a      	sxtb	r2, r3
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <SnakeCheckApple+0x94>)
 8000604:	701a      	strb	r2, [r3, #0]
			apple.y = rand()%FIELDSIZE;
 8000606:	f002 ff41 	bl	800348c <rand>
 800060a:	4603      	mov	r3, r0
 800060c:	425a      	negs	r2, r3
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	f002 020f 	and.w	r2, r2, #15
 8000616:	bf58      	it	pl
 8000618:	4253      	negpl	r3, r2
 800061a:	b25a      	sxtb	r2, r3
 800061c:	4b02      	ldr	r3, [pc, #8]	; (8000628 <SnakeCheckApple+0x94>)
 800061e:	705a      	strb	r2, [r3, #1]
	}

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000098 	.word	0x20000098
 8000628:	20003370 	.word	0x20003370
 800062c:	200000c1 	.word	0x200000c1

08000630 <SnakeDraw>:
void SnakeDraw(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b085      	sub	sp, #20
 8000634:	af02      	add	r7, sp, #8
	BUF_PushColor(buf, BUF_SIZE, TFT9341_CYAN);
 8000636:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800063a:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800063e:	4840      	ldr	r0, [pc, #256]	; (8000740 <SnakeDraw+0x110>)
 8000640:	f000 fb18 	bl	8000c74 <BUF_PushColor>
	for (uint16_t i = 0; i < snakeCount; i++) {
 8000644:	2300      	movs	r3, #0
 8000646:	80fb      	strh	r3, [r7, #6]
 8000648:	e039      	b.n	80006be <SnakeDraw+0x8e>
		TFT9341_DrawRect(buf, snake[i].x * CELLSIZE, snake[i].y * CELLSIZE,
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	4a3d      	ldr	r2, [pc, #244]	; (8000744 <SnakeDraw+0x114>)
 800064e:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8000652:	b29b      	uxth	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	0092      	lsls	r2, r2, #2
 8000658:	4413      	add	r3, r2
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	b299      	uxth	r1, r3
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	4a38      	ldr	r2, [pc, #224]	; (8000744 <SnakeDraw+0x114>)
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800066a:	b29b      	uxth	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	0092      	lsls	r2, r2, #2
 8000670:	4413      	add	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	b29a      	uxth	r2, r3
				snake[i].x * CELLSIZE + CELLSIZE - 1,
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4832      	ldr	r0, [pc, #200]	; (8000744 <SnakeDraw+0x114>)
 800067a:	f910 3013 	ldrsb.w	r3, [r0, r3, lsl #1]
 800067e:	3301      	adds	r3, #1
		TFT9341_DrawRect(buf, snake[i].x * CELLSIZE, snake[i].y * CELLSIZE,
 8000680:	b29b      	uxth	r3, r3
 8000682:	4618      	mov	r0, r3
 8000684:	0080      	lsls	r0, r0, #2
 8000686:	4403      	add	r3, r0
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	b29b      	uxth	r3, r3
 800068c:	3b01      	subs	r3, #1
 800068e:	b298      	uxth	r0, r3
				snake[i].y * CELLSIZE + CELLSIZE - 1);
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	4c2c      	ldr	r4, [pc, #176]	; (8000744 <SnakeDraw+0x114>)
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	4423      	add	r3, r4
 8000698:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800069c:	3301      	adds	r3, #1
		TFT9341_DrawRect(buf, snake[i].x * CELLSIZE, snake[i].y * CELLSIZE,
 800069e:	b29b      	uxth	r3, r3
 80006a0:	461c      	mov	r4, r3
 80006a2:	00a4      	lsls	r4, r4, #2
 80006a4:	4423      	add	r3, r4
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	3b01      	subs	r3, #1
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	4603      	mov	r3, r0
 80006b2:	4823      	ldr	r0, [pc, #140]	; (8000740 <SnakeDraw+0x110>)
 80006b4:	f000 fb0a 	bl	8000ccc <TFT9341_DrawRect>
	for (uint16_t i = 0; i < snakeCount; i++) {
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	3301      	adds	r3, #1
 80006bc:	80fb      	strh	r3, [r7, #6]
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SnakeDraw+0x118>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	88fa      	ldrh	r2, [r7, #6]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d3bf      	bcc.n	800064a <SnakeDraw+0x1a>
	}
	BUF_PushColor(buf2, BUF_SIZE, TFT9341_RED);
 80006ca:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80006ce:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80006d2:	481e      	ldr	r0, [pc, #120]	; (800074c <SnakeDraw+0x11c>)
 80006d4:	f000 face 	bl	8000c74 <BUF_PushColor>
	TFT9341_DrawRect(buf2, apple.x * CELLSIZE, apple.y * CELLSIZE, apple.x * CELLSIZE + CELLSIZE-1, apple.y * CELLSIZE +CELLSIZE-1);
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <SnakeDraw+0x120>)
 80006da:	f993 3000 	ldrsb.w	r3, [r3]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	461a      	mov	r2, r3
 80006e2:	0092      	lsls	r2, r2, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	b299      	uxth	r1, r3
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <SnakeDraw+0x120>)
 80006ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	0092      	lsls	r2, r2, #2
 80006f6:	4413      	add	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <SnakeDraw+0x120>)
 80006fe:	f993 3000 	ldrsb.w	r3, [r3]
 8000702:	3301      	adds	r3, #1
 8000704:	b29b      	uxth	r3, r3
 8000706:	4618      	mov	r0, r3
 8000708:	0080      	lsls	r0, r0, #2
 800070a:	4403      	add	r3, r0
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	b29b      	uxth	r3, r3
 8000710:	3b01      	subs	r3, #1
 8000712:	b298      	uxth	r0, r3
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <SnakeDraw+0x120>)
 8000716:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800071a:	3301      	adds	r3, #1
 800071c:	b29b      	uxth	r3, r3
 800071e:	461c      	mov	r4, r3
 8000720:	00a4      	lsls	r4, r4, #2
 8000722:	4423      	add	r3, r4
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	b29b      	uxth	r3, r3
 8000728:	3b01      	subs	r3, #1
 800072a:	b29b      	uxth	r3, r3
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	4603      	mov	r3, r0
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <SnakeDraw+0x11c>)
 8000732:	f000 facb 	bl	8000ccc <TFT9341_DrawRect>
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	bf00      	nop
 8000740:	200019cc 	.word	0x200019cc
 8000744:	20000098 	.word	0x20000098
 8000748:	200000c1 	.word	0x200000c1
 800074c:	200000c8 	.word	0x200000c8
 8000750:	20003370 	.word	0x20003370

08000754 <SnakeClear>:
void SnakeClear(void){
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b085      	sub	sp, #20
 8000758:	af02      	add	r7, sp, #8
	for (uint16_t i = 0; i < snakeCount; i++) {
 800075a:	2300      	movs	r3, #0
 800075c:	80fb      	strh	r3, [r7, #6]
 800075e:	e039      	b.n	80007d4 <SnakeClear+0x80>
			TFT9341_FillRect(snake[i].x * CELLSIZE, snake[i].y * CELLSIZE,
 8000760:	88fb      	ldrh	r3, [r7, #6]
 8000762:	4a22      	ldr	r2, [pc, #136]	; (80007ec <SnakeClear+0x98>)
 8000764:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8000768:	b29b      	uxth	r3, r3
 800076a:	461a      	mov	r2, r3
 800076c:	0092      	lsls	r2, r2, #2
 800076e:	4413      	add	r3, r2
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	b298      	uxth	r0, r3
 8000774:	88fb      	ldrh	r3, [r7, #6]
 8000776:	4a1d      	ldr	r2, [pc, #116]	; (80007ec <SnakeClear+0x98>)
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	4413      	add	r3, r2
 800077c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000780:	b29b      	uxth	r3, r3
 8000782:	461a      	mov	r2, r3
 8000784:	0092      	lsls	r2, r2, #2
 8000786:	4413      	add	r3, r2
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	b299      	uxth	r1, r3
					snake[i].x * CELLSIZE + CELLSIZE - 1,
 800078c:	88fb      	ldrh	r3, [r7, #6]
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <SnakeClear+0x98>)
 8000790:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8000794:	3301      	adds	r3, #1
			TFT9341_FillRect(snake[i].x * CELLSIZE, snake[i].y * CELLSIZE,
 8000796:	b29b      	uxth	r3, r3
 8000798:	461a      	mov	r2, r3
 800079a:	0092      	lsls	r2, r2, #2
 800079c:	4413      	add	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	3b01      	subs	r3, #1
 80007a4:	b29a      	uxth	r2, r3
					snake[i].y * CELLSIZE + CELLSIZE - 1, TFT9341_WHITE);
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	4c10      	ldr	r4, [pc, #64]	; (80007ec <SnakeClear+0x98>)
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4423      	add	r3, r4
 80007ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80007b2:	3301      	adds	r3, #1
			TFT9341_FillRect(snake[i].x * CELLSIZE, snake[i].y * CELLSIZE,
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	461c      	mov	r4, r3
 80007b8:	00a4      	lsls	r4, r4, #2
 80007ba:	4423      	add	r3, r4
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	b29b      	uxth	r3, r3
 80007c0:	3b01      	subs	r3, #1
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80007c8:	9400      	str	r4, [sp, #0]
 80007ca:	f000 faa1 	bl	8000d10 <TFT9341_FillRect>
	for (uint16_t i = 0; i < snakeCount; i++) {
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	3301      	adds	r3, #1
 80007d2:	80fb      	strh	r3, [r7, #6]
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <SnakeClear+0x9c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	88fa      	ldrh	r2, [r7, #6]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d3bf      	bcc.n	8000760 <SnakeClear+0xc>
		}
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd90      	pop	{r4, r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000098 	.word	0x20000098
 80007f0:	200000c1 	.word	0x200000c1

080007f4 <SnakeMain>:
void SnakeMain(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	snakeCount = 8;
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <SnakeMain+0x6c>)
 80007fa:	2208      	movs	r2, #8
 80007fc:	701a      	strb	r2, [r3, #0]
	apple.x = 8;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <SnakeMain+0x70>)
 8000800:	2208      	movs	r2, #8
 8000802:	701a      	strb	r2, [r3, #0]
	apple.y = 8;
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <SnakeMain+0x70>)
 8000806:	2208      	movs	r2, #8
 8000808:	705a      	strb	r2, [r3, #1]
	vx = 1;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <SnakeMain+0x74>)
 800080c:	2201      	movs	r2, #1
 800080e:	701a      	strb	r2, [r3, #0]
	srand(10);
 8000810:	200a      	movs	r0, #10
 8000812:	f002 fe0d 	bl	8003430 <srand>
	//SnakeReset();
	while (1) {
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8000816:	2101      	movs	r1, #1
 8000818:	4814      	ldr	r0, [pc, #80]	; (800086c <SnakeMain+0x78>)
 800081a:	f001 f9fd 	bl	8001c18 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d102      	bne.n	800082a <SnakeMain+0x36>
			vy = 1;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <SnakeMain+0x7c>)
 8000826:	2201      	movs	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET){
 800082a:	2102      	movs	r1, #2
 800082c:	480f      	ldr	r0, [pc, #60]	; (800086c <SnakeMain+0x78>)
 800082e:	f001 f9f3 	bl	8001c18 <HAL_GPIO_ReadPin>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d102      	bne.n	800083e <SnakeMain+0x4a>
			vy = -1;
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <SnakeMain+0x7c>)
 800083a:	22ff      	movs	r2, #255	; 0xff
 800083c:	701a      	strb	r2, [r3, #0]
		}

		if(timFlag == 1){
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <SnakeMain+0x80>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d1e7      	bne.n	8000816 <SnakeMain+0x22>
			SnakeClear();
 8000846:	f7ff ff85 	bl	8000754 <SnakeClear>
			SnakeUpdatePos();
 800084a:	f7ff fe51 	bl	80004f0 <SnakeUpdatePos>
			SnakeDraw();
 800084e:	f7ff feef 	bl	8000630 <SnakeDraw>
			SnakeCheckApple();
 8000852:	f7ff fe9f 	bl	8000594 <SnakeCheckApple>
			timFlag = 0;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <SnakeMain+0x80>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 800085c:	e7db      	b.n	8000816 <SnakeMain+0x22>
 800085e:	bf00      	nop
 8000860:	200000c1 	.word	0x200000c1
 8000864:	20003370 	.word	0x20003370
 8000868:	200000c4 	.word	0x200000c4
 800086c:	40010800 	.word	0x40010800
 8000870:	200019c8 	.word	0x200019c8
 8000874:	200000c0 	.word	0x200000c0

08000878 <TFT9341_ini>:
#include "spi_ili9341.h"
//-------------------------------------------------------------------
//-------------------------------------------------------------------
void TFT9341_ini(uint16_t w_size, uint16_t h_size) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	460a      	mov	r2, r1
 8000882:	80fb      	strh	r3, [r7, #6]
 8000884:	4613      	mov	r3, r2
 8000886:	80bb      	strh	r3, [r7, #4]
	uint8_t data[15];
	CS_ACTIVE();
 8000888:	2200      	movs	r2, #0
 800088a:	2101      	movs	r1, #1
 800088c:	48a3      	ldr	r0, [pc, #652]	; (8000b1c <TFT9341_ini+0x2a4>)
 800088e:	f001 f9da 	bl	8001c46 <HAL_GPIO_WritePin>
	TFT9341_reset();
 8000892:	f000 f94b 	bl	8000b2c <TFT9341_reset>
	//Software Reset
	TFT9341_SendCommand(0x01);
 8000896:	2001      	movs	r0, #1
 8000898:	f000 f95c 	bl	8000b54 <TFT9341_SendCommand>
	HAL_Delay(1000);
 800089c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a0:	f000 fd16 	bl	80012d0 <HAL_Delay>

	//Power Control A
	data[0] = 0x39;
 80008a4:	2339      	movs	r3, #57	; 0x39
 80008a6:	723b      	strb	r3, [r7, #8]
	data[1] = 0x2C;
 80008a8:	232c      	movs	r3, #44	; 0x2c
 80008aa:	727b      	strb	r3, [r7, #9]
	data[2] = 0x00;
 80008ac:	2300      	movs	r3, #0
 80008ae:	72bb      	strb	r3, [r7, #10]
	data[3] = 0x34;
 80008b0:	2334      	movs	r3, #52	; 0x34
 80008b2:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x02;
 80008b4:	2302      	movs	r3, #2
 80008b6:	733b      	strb	r3, [r7, #12]
	TFT9341_SendCommand(0xCB);
 80008b8:	20cb      	movs	r0, #203	; 0xcb
 80008ba:	f000 f94b 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 5);
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2105      	movs	r1, #5
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 f95f 	bl	8000b88 <TFT9341_WriteData>
	//Power Control B
	data[0] = 0x00;
 80008ca:	2300      	movs	r3, #0
 80008cc:	723b      	strb	r3, [r7, #8]
	data[1] = 0xC1;
 80008ce:	23c1      	movs	r3, #193	; 0xc1
 80008d0:	727b      	strb	r3, [r7, #9]
	data[2] = 0x30;
 80008d2:	2330      	movs	r3, #48	; 0x30
 80008d4:	72bb      	strb	r3, [r7, #10]
	TFT9341_SendCommand(0xCF);
 80008d6:	20cf      	movs	r0, #207	; 0xcf
 80008d8:	f000 f93c 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 3);
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	2103      	movs	r1, #3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f950 	bl	8000b88 <TFT9341_WriteData>
	//Driver timing control A
	data[0] = 0x85;
 80008e8:	2385      	movs	r3, #133	; 0x85
 80008ea:	723b      	strb	r3, [r7, #8]
	data[1] = 0x00;
 80008ec:	2300      	movs	r3, #0
 80008ee:	727b      	strb	r3, [r7, #9]
	data[2] = 0x78;
 80008f0:	2378      	movs	r3, #120	; 0x78
 80008f2:	72bb      	strb	r3, [r7, #10]
	TFT9341_SendCommand(0xE8);
 80008f4:	20e8      	movs	r0, #232	; 0xe8
 80008f6:	f000 f92d 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 3);
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	2103      	movs	r1, #3
 8000900:	4618      	mov	r0, r3
 8000902:	f000 f941 	bl	8000b88 <TFT9341_WriteData>
	//Driver timing control B
	data[0] = 0x00;
 8000906:	2300      	movs	r3, #0
 8000908:	723b      	strb	r3, [r7, #8]
	data[1] = 0x00;
 800090a:	2300      	movs	r3, #0
 800090c:	727b      	strb	r3, [r7, #9]
	TFT9341_SendCommand(0xEA);
 800090e:	20ea      	movs	r0, #234	; 0xea
 8000910:	f000 f920 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 2);
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f934 	bl	8000b88 <TFT9341_WriteData>
	//Power on Sequence control
	data[0] = 0x64;
 8000920:	2364      	movs	r3, #100	; 0x64
 8000922:	723b      	strb	r3, [r7, #8]
	data[1] = 0x03;
 8000924:	2303      	movs	r3, #3
 8000926:	727b      	strb	r3, [r7, #9]
	data[2] = 0x12;
 8000928:	2312      	movs	r3, #18
 800092a:	72bb      	strb	r3, [r7, #10]
	data[3] = 0x81;
 800092c:	2381      	movs	r3, #129	; 0x81
 800092e:	72fb      	strb	r3, [r7, #11]
	TFT9341_SendCommand(0xED);
 8000930:	20ed      	movs	r0, #237	; 0xed
 8000932:	f000 f90f 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 4);
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	2104      	movs	r1, #4
 800093c:	4618      	mov	r0, r3
 800093e:	f000 f923 	bl	8000b88 <TFT9341_WriteData>
	//Pump ratio control
	data[0] = 0x20;
 8000942:	2320      	movs	r3, #32
 8000944:	723b      	strb	r3, [r7, #8]
	TFT9341_SendCommand(0xF7);
 8000946:	20f7      	movs	r0, #247	; 0xf7
 8000948:	f000 f904 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 1);
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	2101      	movs	r1, #1
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f918 	bl	8000b88 <TFT9341_WriteData>
	//Power Control,VRH[5:0]
	data[0] = 0x10;
 8000958:	2310      	movs	r3, #16
 800095a:	723b      	strb	r3, [r7, #8]
	TFT9341_SendCommand(0xC0);
 800095c:	20c0      	movs	r0, #192	; 0xc0
 800095e:	f000 f8f9 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 1);
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	2101      	movs	r1, #1
 8000968:	4618      	mov	r0, r3
 800096a:	f000 f90d 	bl	8000b88 <TFT9341_WriteData>
	//Power Control,SAP[2:0];BT[3:0]
	data[0] = 0x10;
 800096e:	2310      	movs	r3, #16
 8000970:	723b      	strb	r3, [r7, #8]
	TFT9341_SendCommand(0xC1);
 8000972:	20c1      	movs	r0, #193	; 0xc1
 8000974:	f000 f8ee 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 1);
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	2101      	movs	r1, #1
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f902 	bl	8000b88 <TFT9341_WriteData>
	//VCOM Control 1
	data[0] = 0x3E;
 8000984:	233e      	movs	r3, #62	; 0x3e
 8000986:	723b      	strb	r3, [r7, #8]
	data[1] = 0x28;
 8000988:	2328      	movs	r3, #40	; 0x28
 800098a:	727b      	strb	r3, [r7, #9]
	TFT9341_SendCommand(0xC5);
 800098c:	20c5      	movs	r0, #197	; 0xc5
 800098e:	f000 f8e1 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 2);
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	2102      	movs	r1, #2
 8000998:	4618      	mov	r0, r3
 800099a:	f000 f8f5 	bl	8000b88 <TFT9341_WriteData>
	//VCOM Control 2
	data[0] = 0x86;
 800099e:	2386      	movs	r3, #134	; 0x86
 80009a0:	723b      	strb	r3, [r7, #8]
	TFT9341_SendCommand(0xC7);
 80009a2:	20c7      	movs	r0, #199	; 0xc7
 80009a4:	f000 f8d6 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 1);
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	2101      	movs	r1, #1
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f8ea 	bl	8000b88 <TFT9341_WriteData>
	//Memory Acsess Control
	data[0] = 0x48;
 80009b4:	2348      	movs	r3, #72	; 0x48
 80009b6:	723b      	strb	r3, [r7, #8]
	TFT9341_SendCommand(0x36);
 80009b8:	2036      	movs	r0, #54	; 0x36
 80009ba:	f000 f8cb 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 1);
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2101      	movs	r1, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f8df 	bl	8000b88 <TFT9341_WriteData>
	//Pixel Format Set
	data[0] = 0x55; //16bit
 80009ca:	2355      	movs	r3, #85	; 0x55
 80009cc:	723b      	strb	r3, [r7, #8]
	TFT9341_SendCommand(0x3A);
 80009ce:	203a      	movs	r0, #58	; 0x3a
 80009d0:	f000 f8c0 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 1);
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f8d4 	bl	8000b88 <TFT9341_WriteData>
	//Frame Rratio Control, Standard RGB Color
	data[0] = 0x00;
 80009e0:	2300      	movs	r3, #0
 80009e2:	723b      	strb	r3, [r7, #8]
	data[1] = 0x18;
 80009e4:	2318      	movs	r3, #24
 80009e6:	727b      	strb	r3, [r7, #9]
	TFT9341_SendCommand(0xB1);
 80009e8:	20b1      	movs	r0, #177	; 0xb1
 80009ea:	f000 f8b3 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 2);
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	2102      	movs	r1, #2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 f8c7 	bl	8000b88 <TFT9341_WriteData>
	//Display Function Control
	data[0] = 0x08;
 80009fa:	2308      	movs	r3, #8
 80009fc:	723b      	strb	r3, [r7, #8]
	data[1] = 0x82;
 80009fe:	2382      	movs	r3, #130	; 0x82
 8000a00:	727b      	strb	r3, [r7, #9]
	data[2] = 0x27; //320 строк
 8000a02:	2327      	movs	r3, #39	; 0x27
 8000a04:	72bb      	strb	r3, [r7, #10]
	TFT9341_SendCommand(0xB6);
 8000a06:	20b6      	movs	r0, #182	; 0xb6
 8000a08:	f000 f8a4 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 3);
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	2103      	movs	r1, #3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f8b8 	bl	8000b88 <TFT9341_WriteData>
	//Enable 3G (пока не знаю что это за режим)
	data[0] = 0x00; //не включаем
 8000a18:	2300      	movs	r3, #0
 8000a1a:	723b      	strb	r3, [r7, #8]
	TFT9341_SendCommand(0xF2);
 8000a1c:	20f2      	movs	r0, #242	; 0xf2
 8000a1e:	f000 f899 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 1);
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	2101      	movs	r1, #1
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f8ad 	bl	8000b88 <TFT9341_WriteData>
	//Gamma set
	data[0] = 0x01; //Gamma Curve (G2.2) (Кривая цветовой гаммы)
 8000a2e:	2301      	movs	r3, #1
 8000a30:	723b      	strb	r3, [r7, #8]
	TFT9341_SendCommand(0x26);
 8000a32:	2026      	movs	r0, #38	; 0x26
 8000a34:	f000 f88e 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 1);
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f8a2 	bl	8000b88 <TFT9341_WriteData>
	//Positive Gamma  Correction
	data[0] = 0x0F;
 8000a44:	230f      	movs	r3, #15
 8000a46:	723b      	strb	r3, [r7, #8]
	data[1] = 0x31;
 8000a48:	2331      	movs	r3, #49	; 0x31
 8000a4a:	727b      	strb	r3, [r7, #9]
	data[2] = 0x2B;
 8000a4c:	232b      	movs	r3, #43	; 0x2b
 8000a4e:	72bb      	strb	r3, [r7, #10]
	data[3] = 0x0C;
 8000a50:	230c      	movs	r3, #12
 8000a52:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x0E;
 8000a54:	230e      	movs	r3, #14
 8000a56:	733b      	strb	r3, [r7, #12]
	data[5] = 0x08;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	737b      	strb	r3, [r7, #13]
	data[6] = 0x4E;
 8000a5c:	234e      	movs	r3, #78	; 0x4e
 8000a5e:	73bb      	strb	r3, [r7, #14]
	data[7] = 0xF1;
 8000a60:	23f1      	movs	r3, #241	; 0xf1
 8000a62:	73fb      	strb	r3, [r7, #15]
	data[8] = 0x37;
 8000a64:	2337      	movs	r3, #55	; 0x37
 8000a66:	743b      	strb	r3, [r7, #16]
	data[9] = 0x07;
 8000a68:	2307      	movs	r3, #7
 8000a6a:	747b      	strb	r3, [r7, #17]
	data[10] = 0x10;
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	74bb      	strb	r3, [r7, #18]
	data[11] = 0x03;
 8000a70:	2303      	movs	r3, #3
 8000a72:	74fb      	strb	r3, [r7, #19]
	data[12] = 0x0E;
 8000a74:	230e      	movs	r3, #14
 8000a76:	753b      	strb	r3, [r7, #20]
	data[13] = 0x09;
 8000a78:	2309      	movs	r3, #9
 8000a7a:	757b      	strb	r3, [r7, #21]
	data[14] = 0x00;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	75bb      	strb	r3, [r7, #22]
	TFT9341_SendCommand(0xE0);
 8000a80:	20e0      	movs	r0, #224	; 0xe0
 8000a82:	f000 f867 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 15);
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f87b 	bl	8000b88 <TFT9341_WriteData>
	//Negative Gamma  Correction
	data[0] = 0x00;
 8000a92:	2300      	movs	r3, #0
 8000a94:	723b      	strb	r3, [r7, #8]
	data[1] = 0x0E;
 8000a96:	230e      	movs	r3, #14
 8000a98:	727b      	strb	r3, [r7, #9]
	data[2] = 0x14;
 8000a9a:	2314      	movs	r3, #20
 8000a9c:	72bb      	strb	r3, [r7, #10]
	data[3] = 0x03;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x11;
 8000aa2:	2311      	movs	r3, #17
 8000aa4:	733b      	strb	r3, [r7, #12]
	data[5] = 0x07;
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	737b      	strb	r3, [r7, #13]
	data[6] = 0x31;
 8000aaa:	2331      	movs	r3, #49	; 0x31
 8000aac:	73bb      	strb	r3, [r7, #14]
	data[7] = 0xC1;
 8000aae:	23c1      	movs	r3, #193	; 0xc1
 8000ab0:	73fb      	strb	r3, [r7, #15]
	data[8] = 0x48;
 8000ab2:	2348      	movs	r3, #72	; 0x48
 8000ab4:	743b      	strb	r3, [r7, #16]
	data[9] = 0x08;
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	747b      	strb	r3, [r7, #17]
	data[10] = 0x0F;
 8000aba:	230f      	movs	r3, #15
 8000abc:	74bb      	strb	r3, [r7, #18]
	data[11] = 0x0C;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	74fb      	strb	r3, [r7, #19]
	data[12] = 0x31;
 8000ac2:	2331      	movs	r3, #49	; 0x31
 8000ac4:	753b      	strb	r3, [r7, #20]
	data[13] = 0x36;
 8000ac6:	2336      	movs	r3, #54	; 0x36
 8000ac8:	757b      	strb	r3, [r7, #21]
	data[14] = 0x0F;
 8000aca:	230f      	movs	r3, #15
 8000acc:	75bb      	strb	r3, [r7, #22]
	TFT9341_SendCommand(0xE1);
 8000ace:	20e1      	movs	r0, #225	; 0xe1
 8000ad0:	f000 f840 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 15);
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	210f      	movs	r1, #15
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f854 	bl	8000b88 <TFT9341_WriteData>
	TFT9341_SendCommand(0x11); //Выйдем из спящего режима
 8000ae0:	2011      	movs	r0, #17
 8000ae2:	f000 f837 	bl	8000b54 <TFT9341_SendCommand>
	HAL_Delay(120);
 8000ae6:	2078      	movs	r0, #120	; 0x78
 8000ae8:	f000 fbf2 	bl	80012d0 <HAL_Delay>
	//Display ON
	data[0] = TFT9341_ROTATION;
 8000aec:	2348      	movs	r3, #72	; 0x48
 8000aee:	723b      	strb	r3, [r7, #8]
	TFT9341_SendCommand(0x29);
 8000af0:	2029      	movs	r0, #41	; 0x29
 8000af2:	f000 f82f 	bl	8000b54 <TFT9341_SendCommand>
	TFT9341_WriteData(data, 1);
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	2101      	movs	r1, #1
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f843 	bl	8000b88 <TFT9341_WriteData>
	TFT9341_WIDTH = w_size;
 8000b02:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <TFT9341_ini+0x2a8>)
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	8013      	strh	r3, [r2, #0]
	TFT9341_HEIGHT = h_size;
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <TFT9341_ini+0x2ac>)
 8000b0a:	88bb      	ldrh	r3, [r7, #4]
 8000b0c:	8013      	strh	r3, [r2, #0]

	DMA_Flag = 0;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <TFT9341_ini+0x2b0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40010c00 	.word	0x40010c00
 8000b20:	200019ca 	.word	0x200019ca
 8000b24:	200000c2 	.word	0x200000c2
 8000b28:	200032cc 	.word	0x200032cc

08000b2c <TFT9341_reset>:
//-------------------------------------------------------------------
void TFT9341_reset(void) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 8000b30:	2200      	movs	r2, #0
 8000b32:	2102      	movs	r1, #2
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <TFT9341_reset+0x24>)
 8000b36:	f001 f886 	bl	8001c46 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000b3a:	2005      	movs	r0, #5
 8000b3c:	f000 fbc8 	bl	80012d0 <HAL_Delay>
	RESET_IDLE();
 8000b40:	2201      	movs	r2, #1
 8000b42:	2102      	movs	r1, #2
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <TFT9341_reset+0x24>)
 8000b46:	f001 f87e 	bl	8001c46 <HAL_GPIO_WritePin>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40010c00 	.word	0x40010c00

08000b54 <TFT9341_SendCommand>:
//-------------------------------------------------------------------
void TFT9341_SendCommand(uint8_t cmd) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	DC_COMMAND();
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2110      	movs	r1, #16
 8000b62:	4807      	ldr	r0, [pc, #28]	; (8000b80 <TFT9341_SendCommand+0x2c>)
 8000b64:	f001 f86f 	bl	8001c46 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 5000);
 8000b68:	1df9      	adds	r1, r7, #7
 8000b6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <TFT9341_SendCommand+0x30>)
 8000b72:	f001 fd05 	bl	8002580 <HAL_SPI_Transmit>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40010800 	.word	0x40010800
 8000b84:	200032d0 	.word	0x200032d0

08000b88 <TFT9341_WriteData>:
void TFT9341_SendData(uint8_t dt) {
	DC_DATA();
	HAL_SPI_Transmit(&hspi1, &dt, 1, 5000);
}
//-------------------------------------------------------------------
void TFT9341_WriteData(uint8_t *buff, size_t buff_size) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8000b92:	2201      	movs	r2, #1
 8000b94:	2110      	movs	r1, #16
 8000b96:	4811      	ldr	r0, [pc, #68]	; (8000bdc <TFT9341_WriteData+0x54>)
 8000b98:	f001 f855 	bl	8001c46 <HAL_GPIO_WritePin>
	while (buff_size > 0) {
 8000b9c:	e015      	b.n	8000bca <TFT9341_WriteData+0x42>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ba4:	bf28      	it	cs
 8000ba6:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000baa:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi1, buff, chunk_size, HAL_MAX_DELAY);
 8000bac:	89fa      	ldrh	r2, [r7, #14]
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	480a      	ldr	r0, [pc, #40]	; (8000be0 <TFT9341_WriteData+0x58>)
 8000bb6:	f001 fce3 	bl	8002580 <HAL_SPI_Transmit>
		buff += chunk_size;
 8000bba:	89fb      	ldrh	r3, [r7, #14]
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000bc2:	89fb      	ldrh	r3, [r7, #14]
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1e6      	bne.n	8000b9e <TFT9341_WriteData+0x16>
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40010800 	.word	0x40010800
 8000be0:	200032d0 	.word	0x200032d0

08000be4 <TFT9341_SetAddrWindow>:

//-------------------------------------------------------------------
static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1,
		uint16_t y1) {
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4604      	mov	r4, r0
 8000bec:	4608      	mov	r0, r1
 8000bee:	4611      	mov	r1, r2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4623      	mov	r3, r4
 8000bf4:	80fb      	strh	r3, [r7, #6]
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80bb      	strh	r3, [r7, #4]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	807b      	strh	r3, [r7, #2]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	803b      	strh	r3, [r7, #0]
	// column address set
	TFT9341_SendCommand(0x2A); // CASET
 8000c02:	202a      	movs	r0, #42	; 0x2a
 8000c04:	f7ff ffa6 	bl	8000b54 <TFT9341_SendCommand>
	{
		uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	0a1b      	lsrs	r3, r3, #8
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	733b      	strb	r3, [r7, #12]
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	737b      	strb	r3, [r7, #13]
 8000c18:	887b      	ldrh	r3, [r7, #2]
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	73bb      	strb	r3, [r7, #14]
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	73fb      	strb	r3, [r7, #15]
				& 0xFF };
		TFT9341_WriteData(data, sizeof(data));
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ffaa 	bl	8000b88 <TFT9341_WriteData>
	}

	// row address set
	TFT9341_SendCommand(0x2B); // RASET
 8000c34:	202b      	movs	r0, #43	; 0x2b
 8000c36:	f7ff ff8d 	bl	8000b54 <TFT9341_SendCommand>
	{
		uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1
 8000c3a:	88bb      	ldrh	r3, [r7, #4]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	723b      	strb	r3, [r7, #8]
 8000c44:	88bb      	ldrh	r3, [r7, #4]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	727b      	strb	r3, [r7, #9]
 8000c4a:	883b      	ldrh	r3, [r7, #0]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	72bb      	strb	r3, [r7, #10]
 8000c54:	883b      	ldrh	r3, [r7, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	72fb      	strb	r3, [r7, #11]
				& 0xFF };
		TFT9341_WriteData(data, sizeof(data));
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	2104      	movs	r1, #4
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff91 	bl	8000b88 <TFT9341_WriteData>
	}

	// write to RAM
	TFT9341_SendCommand(0x2C); // RAMWR
 8000c66:	202c      	movs	r0, #44	; 0x2c
 8000c68:	f7ff ff74 	bl	8000b54 <TFT9341_SendCommand>
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd90      	pop	{r4, r7, pc}

08000c74 <BUF_PushColor>:
//-------------------------------------------------------------------

void BUF_PushColor(uint8_t *buffer, uint16_t size, uint16_t color) {
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
 8000c80:	4613      	mov	r3, r2
 8000c82:	803b      	strh	r3, [r7, #0]
	for (int i = 0; i < size; i++) {
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	e016      	b.n	8000cb8 <BUF_PushColor+0x44>
		if (i % 2 == 0) {
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d108      	bne.n	8000ca6 <BUF_PushColor+0x32>
			buffer[i] = color >> 8;
 8000c94:	883b      	ldrh	r3, [r7, #0]
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	b299      	uxth	r1, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	b2ca      	uxtb	r2, r1
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	e005      	b.n	8000cb2 <BUF_PushColor+0x3e>
		} else {
			buffer[i] = color & 0xFF;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	883a      	ldrh	r2, [r7, #0]
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	887b      	ldrh	r3, [r7, #2]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbe4      	blt.n	8000c8a <BUF_PushColor+0x16>
		}
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <TFT9341_DrawRect>:
		uint16_t x2, uint16_t y2) {
	TFT9341_SetAddrWindow(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1);
	DC_DATA();
	TFT9341_PushBuffer(buf, 1);
}
void TFT9341_DrawRect(uint8_t* buffer, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4603      	mov	r3, r0
 8000cdc:	817b      	strh	r3, [r7, #10]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	813b      	strh	r3, [r7, #8]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	80fb      	strh	r3, [r7, #6]
	TFT9341_SetAddrWindow(x1, y1, x2, y2);
 8000ce6:	8b3b      	ldrh	r3, [r7, #24]
 8000ce8:	88fa      	ldrh	r2, [r7, #6]
 8000cea:	8939      	ldrh	r1, [r7, #8]
 8000cec:	8978      	ldrh	r0, [r7, #10]
 8000cee:	f7ff ff79 	bl	8000be4 <TFT9341_SetAddrWindow>
	DC_DATA();
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <TFT9341_DrawRect+0x40>)
 8000cf8:	f000 ffa5 	bl	8001c46 <HAL_GPIO_WritePin>
	TFT9341_PushBuffer(buffer, 1);
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f000 f848 	bl	8000d94 <TFT9341_PushBuffer>
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40010800 	.word	0x40010800

08000d10 <TFT9341_FillRect>:
void TFT9341_FillRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,
		uint16_t color) {
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4604      	mov	r4, r0
 8000d18:	4608      	mov	r0, r1
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4623      	mov	r3, r4
 8000d20:	80fb      	strh	r3, [r7, #6]
 8000d22:	4603      	mov	r3, r0
 8000d24:	80bb      	strh	r3, [r7, #4]
 8000d26:	460b      	mov	r3, r1
 8000d28:	807b      	strh	r3, [r7, #2]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	803b      	strh	r3, [r7, #0]
	BUF_PushColor(buf, BUF_SIZE, color);
 8000d2e:	8c3b      	ldrh	r3, [r7, #32]
 8000d30:	461a      	mov	r2, r3
 8000d32:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8000d36:	4814      	ldr	r0, [pc, #80]	; (8000d88 <TFT9341_FillRect+0x78>)
 8000d38:	f7ff ff9c 	bl	8000c74 <BUF_PushColor>
	TFT9341_SetAddrWindow(x1, y1, x2, y2);
 8000d3c:	883b      	ldrh	r3, [r7, #0]
 8000d3e:	887a      	ldrh	r2, [r7, #2]
 8000d40:	88b9      	ldrh	r1, [r7, #4]
 8000d42:	88f8      	ldrh	r0, [r7, #6]
 8000d44:	f7ff ff4e 	bl	8000be4 <TFT9341_SetAddrWindow>
	//uint8_t data[] = { color >> 8, color & 0xFF };
	uint8_t r = (x2 - x1) * (y2 - y1) / (BUF_SIZE / 2) + 1;
 8000d48:	887a      	ldrh	r2, [r7, #2]
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	8839      	ldrh	r1, [r7, #0]
 8000d50:	88ba      	ldrh	r2, [r7, #4]
 8000d52:	1a8a      	subs	r2, r1, r2
 8000d54:	fb02 f303 	mul.w	r3, r2, r3
 8000d58:	4a0c      	ldr	r2, [pc, #48]	; (8000d8c <TFT9341_FillRect+0x7c>)
 8000d5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5e:	1292      	asrs	r2, r2, #10
 8000d60:	17db      	asrs	r3, r3, #31
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	3301      	adds	r3, #1
 8000d68:	73fb      	strb	r3, [r7, #15]
	DC_DATA();
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	4808      	ldr	r0, [pc, #32]	; (8000d90 <TFT9341_FillRect+0x80>)
 8000d70:	f000 ff69 	bl	8001c46 <HAL_GPIO_WritePin>
	TFT9341_PushBuffer(buf, r);
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	4619      	mov	r1, r3
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <TFT9341_FillRect+0x78>)
 8000d7a:	f000 f80b 	bl	8000d94 <TFT9341_PushBuffer>
	 }
	 */

	//заполнять буфер
	//BUF_PushColor(buf2, 8192, color);
}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd90      	pop	{r4, r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200019cc 	.word	0x200019cc
 8000d8c:	51eb851f 	.word	0x51eb851f
 8000d90:	40010800 	.word	0x40010800

08000d94 <TFT9341_PushBuffer>:
void TFT9341_PushBuffer(uint8_t *buffer, uint8_t step) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(&hspi1, buffer, BUF_SIZE);
 8000da0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	480f      	ldr	r0, [pc, #60]	; (8000de4 <TFT9341_PushBuffer+0x50>)
 8000da8:	f001 fd26 	bl	80027f8 <HAL_SPI_Transmit_DMA>
 8000dac:	4603      	mov	r3, r0
 8000dae:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(5);
 8000db0:	2005      	movs	r0, #5
 8000db2:	f000 fa8d 	bl	80012d0 <HAL_Delay>
	while (DMA_Flag == 0) {
 8000db6:	bf00      	nop
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <TFT9341_PushBuffer+0x54>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0fb      	beq.n	8000db8 <TFT9341_PushBuffer+0x24>
	}
	if (status == HAL_OK) {
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d102      	bne.n	8000dcc <TFT9341_PushBuffer+0x38>
		step -= 1;
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	70fb      	strb	r3, [r7, #3]
	}
	if (step > 0) {
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <TFT9341_PushBuffer+0x48>
		TFT9341_PushBuffer(buffer, step);
 8000dd2:	78fb      	ldrb	r3, [r7, #3]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffdc 	bl	8000d94 <TFT9341_PushBuffer>
	}
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200032d0 	.word	0x200032d0
 8000de8:	200032cc 	.word	0x200032cc

08000dec <TFT9341_FillScreen>:

//-------------------------------------------------------------------
void TFT9341_FillScreen(uint16_t color) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	4603      	mov	r3, r0
 8000df4:	80fb      	strh	r3, [r7, #6]
	TFT9341_FillRect(0, 0, TFT9341_WIDTH - 1, TFT9341_HEIGHT - 1, color);
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <TFT9341_FillScreen+0x30>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <TFT9341_FillScreen+0x34>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	b299      	uxth	r1, r3
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff ff7e 	bl	8000d10 <TFT9341_FillRect>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200019ca 	.word	0x200019ca
 8000e20:	200000c2 	.word	0x200000c2

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6193      	str	r3, [r2, #24]
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	61d3      	str	r3, [r2, #28]
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_MspInit+0x5c>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_MspInit+0x60>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_MspInit+0x60>)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010000 	.word	0x40010000

08000e88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a2f      	ldr	r2, [pc, #188]	; (8000f60 <HAL_SPI_MspInit+0xd8>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d156      	bne.n	8000f56 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ea8:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <HAL_SPI_MspInit+0xdc>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a2d      	ldr	r2, [pc, #180]	; (8000f64 <HAL_SPI_MspInit+0xdc>)
 8000eae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <HAL_SPI_MspInit+0xdc>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <HAL_SPI_MspInit+0xdc>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a27      	ldr	r2, [pc, #156]	; (8000f64 <HAL_SPI_MspInit+0xdc>)
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <HAL_SPI_MspInit+0xdc>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ed8:	23a0      	movs	r3, #160	; 0xa0
 8000eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4619      	mov	r1, r3
 8000eea:	481f      	ldr	r0, [pc, #124]	; (8000f68 <HAL_SPI_MspInit+0xe0>)
 8000eec:	f000 fd10 	bl	8001910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ef0:	2340      	movs	r3, #64	; 0x40
 8000ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	4819      	ldr	r0, [pc, #100]	; (8000f68 <HAL_SPI_MspInit+0xe0>)
 8000f04:	f000 fd04 	bl	8001910 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_SPI_MspInit+0xe4>)
 8000f0a:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <HAL_SPI_MspInit+0xe8>)
 8000f0c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_SPI_MspInit+0xe4>)
 8000f10:	2210      	movs	r2, #16
 8000f12:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_SPI_MspInit+0xe4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_SPI_MspInit+0xe4>)
 8000f1c:	2280      	movs	r2, #128	; 0x80
 8000f1e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_SPI_MspInit+0xe4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_SPI_MspInit+0xe4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_SPI_MspInit+0xe4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_SPI_MspInit+0xe4>)
 8000f34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f38:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f3a:	480c      	ldr	r0, [pc, #48]	; (8000f6c <HAL_SPI_MspInit+0xe4>)
 8000f3c:	f000 fafa 	bl	8001534 <HAL_DMA_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8000f46:	f7ff facd 	bl	80004e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_SPI_MspInit+0xe4>)
 8000f4e:	649a      	str	r2, [r3, #72]	; 0x48
 8000f50:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_SPI_MspInit+0xe4>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40013000 	.word	0x40013000
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010800 	.word	0x40010800
 8000f6c:	20003374 	.word	0x20003374
 8000f70:	40020030 	.word	0x40020030

08000f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f84:	d113      	bne.n	8000fae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_TIM_Base_MspInit+0x44>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <HAL_TIM_Base_MspInit+0x44>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HAL_TIM_Base_MspInit+0x44>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	201c      	movs	r0, #28
 8000fa4:	f000 fa8f 	bl	80014c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fa8:	201c      	movs	r0, #28
 8000faa:	f000 faa8 	bl	80014fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <MemManage_Handler+0x4>

08000fce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <BusFault_Handler+0x4>

08000fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <UsageFault_Handler+0x4>

08000fda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr

08000ffe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001002:	f000 f949 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <DMA1_Channel3_IRQHandler+0x10>)
 8001012:	f000 fb49 	bl	80016a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20003374 	.word	0x20003374

08001020 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <TIM2_IRQHandler+0x10>)
 8001026:	f001 fe79 	bl	8002d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20003328 	.word	0x20003328

08001034 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
	return 1;
 8001038:	2301      	movs	r3, #1
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <_kill>:

int _kill(int pid, int sig)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800104c:	f002 f9be 	bl	80033cc <__errno>
 8001050:	4603      	mov	r3, r0
 8001052:	2216      	movs	r2, #22
 8001054:	601a      	str	r2, [r3, #0]
	return -1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_exit>:

void _exit (int status)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800106a:	f04f 31ff 	mov.w	r1, #4294967295
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffe7 	bl	8001042 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001074:	e7fe      	b.n	8001074 <_exit+0x12>

08001076 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	e00a      	b.n	800109e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001088:	f3af 8000 	nop.w
 800108c:	4601      	mov	r1, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	60ba      	str	r2, [r7, #8]
 8001094:	b2ca      	uxtb	r2, r1
 8001096:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbf0      	blt.n	8001088 <_read+0x12>
	}

return len;
 80010a6:	687b      	ldr	r3, [r7, #4]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	e009      	b.n	80010d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1c5a      	adds	r2, r3, #1
 80010c6:	60ba      	str	r2, [r7, #8]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	dbf1      	blt.n	80010c2 <_write+0x12>
	}
	return len;
 80010de:	687b      	ldr	r3, [r7, #4]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_close>:

int _close(int file)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	return -1;
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110e:	605a      	str	r2, [r3, #4]
	return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <_isatty>:

int _isatty(int file)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	return 1;
 8001124:	2301      	movs	r3, #1
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
	return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001150:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <_sbrk+0x5c>)
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <_sbrk+0x60>)
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <_sbrk+0x64>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <_sbrk+0x68>)
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	429a      	cmp	r2, r3
 8001176:	d207      	bcs.n	8001188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001178:	f002 f928 	bl	80033cc <__errno>
 800117c:	4603      	mov	r3, r0
 800117e:	220c      	movs	r2, #12
 8001180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	e009      	b.n	800119c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <_sbrk+0x64>)
 8001198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20005000 	.word	0x20005000
 80011a8:	00000400 	.word	0x00000400
 80011ac:	2000008c 	.word	0x2000008c
 80011b0:	200033d0 	.word	0x200033d0

080011b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011c2:	490d      	ldr	r1, [pc, #52]	; (80011f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d8:	4c0a      	ldr	r4, [pc, #40]	; (8001204 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011e6:	f7ff ffe5 	bl	80011b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f002 f8f5 	bl	80033d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ee:	f7fe ffcf 	bl	8000190 <main>
  bx lr
 80011f2:	4770      	bx	lr
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011fc:	08004630 	.word	0x08004630
  ldr r2, =_sbss
 8001200:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001204:	200033cc 	.word	0x200033cc

08001208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC1_2_IRQHandler>
	...

0800120c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x28>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x28>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f947 	bl	80014b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	200f      	movs	r0, #15
 8001224:	f000 f808 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fdfc 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40022000 	.word	0x40022000

08001238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x54>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x58>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f95f 	bl	800151a <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f000 f927 	bl	80014c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_InitTick+0x5c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000000 	.word	0x20000000
 8001290:	20000008 	.word	0x20000008
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_IncTick+0x1c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_IncTick+0x20>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a03      	ldr	r2, [pc, #12]	; (80012b8 <HAL_IncTick+0x20>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	20000008 	.word	0x20000008
 80012b8:	200033b8 	.word	0x200033b8

080012bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b02      	ldr	r3, [pc, #8]	; (80012cc <HAL_GetTick+0x10>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	200033b8 	.word	0x200033b8

080012d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d8:	f7ff fff0 	bl	80012bc <HAL_GetTick>
 80012dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e8:	d005      	beq.n	80012f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_Delay+0x44>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f6:	bf00      	nop
 80012f8:	f7ff ffe0 	bl	80012bc <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	429a      	cmp	r2, r3
 8001306:	d8f7      	bhi.n	80012f8 <HAL_Delay+0x28>
  {
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000008 	.word	0x20000008

08001318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <__NVIC_GetPriorityGrouping+0x18>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 0307 	and.w	r3, r3, #7
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	db0b      	blt.n	80013a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	f003 021f 	and.w	r2, r3, #31
 8001394:	4906      	ldr	r1, [pc, #24]	; (80013b0 <__NVIC_EnableIRQ+0x34>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	2001      	movs	r0, #1
 800139e:	fa00 f202 	lsl.w	r2, r0, r2
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800147c:	d301      	bcc.n	8001482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147e:	2301      	movs	r3, #1
 8001480:	e00f      	b.n	80014a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <SysTick_Config+0x40>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148a:	210f      	movs	r1, #15
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f7ff ff90 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <SysTick_Config+0x40>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SysTick_Config+0x40>)
 800149c:	2207      	movs	r2, #7
 800149e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff2d 	bl	8001318 <__NVIC_SetPriorityGrouping>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d8:	f7ff ff42 	bl	8001360 <__NVIC_GetPriorityGrouping>
 80014dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff ff90 	bl	8001408 <NVIC_EncodePriority>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff5f 	bl	80013b4 <__NVIC_SetPriority>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff35 	bl	800137c <__NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffa2 	bl	800146c <SysTick_Config>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e043      	b.n	80015d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_DMA_Init+0xa8>)
 8001552:	4413      	add	r3, r2
 8001554:	4a22      	ldr	r2, [pc, #136]	; (80015e0 <HAL_DMA_Init+0xac>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	091b      	lsrs	r3, r3, #4
 800155c:	009a      	lsls	r2, r3, #2
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a1f      	ldr	r2, [pc, #124]	; (80015e4 <HAL_DMA_Init+0xb0>)
 8001566:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2202      	movs	r2, #2
 800156c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800157e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001582:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800158c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001598:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	bffdfff8 	.word	0xbffdfff8
 80015e0:	cccccccd 	.word	0xcccccccd
 80015e4:	40020000 	.word	0x40020000

080015e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_DMA_Start_IT+0x20>
 8001604:	2302      	movs	r3, #2
 8001606:	e04a      	b.n	800169e <HAL_DMA_Start_IT+0xb6>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001616:	2b01      	cmp	r3, #1
 8001618:	d13a      	bne.n	8001690 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2202      	movs	r2, #2
 800161e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0201 	bic.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 f938 	bl	80018b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 020e 	orr.w	r2, r2, #14
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	e00f      	b.n	800167e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0204 	bic.w	r2, r2, #4
 800166c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 020a 	orr.w	r2, r2, #10
 800167c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0201 	orr.w	r2, r2, #1
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e005      	b.n	800169c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001698:	2302      	movs	r3, #2
 800169a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800169c:	7dfb      	ldrb	r3, [r7, #23]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	2204      	movs	r2, #4
 80016c6:	409a      	lsls	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d04f      	beq.n	8001770 <HAL_DMA_IRQHandler+0xc8>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d04a      	beq.n	8001770 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d107      	bne.n	80016f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0204 	bic.w	r2, r2, #4
 80016f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a66      	ldr	r2, [pc, #408]	; (8001898 <HAL_DMA_IRQHandler+0x1f0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d029      	beq.n	8001756 <HAL_DMA_IRQHandler+0xae>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a65      	ldr	r2, [pc, #404]	; (800189c <HAL_DMA_IRQHandler+0x1f4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d022      	beq.n	8001752 <HAL_DMA_IRQHandler+0xaa>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a63      	ldr	r2, [pc, #396]	; (80018a0 <HAL_DMA_IRQHandler+0x1f8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d01a      	beq.n	800174c <HAL_DMA_IRQHandler+0xa4>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a62      	ldr	r2, [pc, #392]	; (80018a4 <HAL_DMA_IRQHandler+0x1fc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d012      	beq.n	8001746 <HAL_DMA_IRQHandler+0x9e>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a60      	ldr	r2, [pc, #384]	; (80018a8 <HAL_DMA_IRQHandler+0x200>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d00a      	beq.n	8001740 <HAL_DMA_IRQHandler+0x98>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a5f      	ldr	r2, [pc, #380]	; (80018ac <HAL_DMA_IRQHandler+0x204>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d102      	bne.n	800173a <HAL_DMA_IRQHandler+0x92>
 8001734:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001738:	e00e      	b.n	8001758 <HAL_DMA_IRQHandler+0xb0>
 800173a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800173e:	e00b      	b.n	8001758 <HAL_DMA_IRQHandler+0xb0>
 8001740:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001744:	e008      	b.n	8001758 <HAL_DMA_IRQHandler+0xb0>
 8001746:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800174a:	e005      	b.n	8001758 <HAL_DMA_IRQHandler+0xb0>
 800174c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001750:	e002      	b.n	8001758 <HAL_DMA_IRQHandler+0xb0>
 8001752:	2340      	movs	r3, #64	; 0x40
 8001754:	e000      	b.n	8001758 <HAL_DMA_IRQHandler+0xb0>
 8001756:	2304      	movs	r3, #4
 8001758:	4a55      	ldr	r2, [pc, #340]	; (80018b0 <HAL_DMA_IRQHandler+0x208>)
 800175a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 8094 	beq.w	800188e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800176e:	e08e      	b.n	800188e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	2202      	movs	r2, #2
 8001776:	409a      	lsls	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d056      	beq.n	800182e <HAL_DMA_IRQHandler+0x186>
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d051      	beq.n	800182e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0320 	and.w	r3, r3, #32
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10b      	bne.n	80017b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 020a 	bic.w	r2, r2, #10
 80017a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a38      	ldr	r2, [pc, #224]	; (8001898 <HAL_DMA_IRQHandler+0x1f0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d029      	beq.n	800180e <HAL_DMA_IRQHandler+0x166>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a37      	ldr	r2, [pc, #220]	; (800189c <HAL_DMA_IRQHandler+0x1f4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d022      	beq.n	800180a <HAL_DMA_IRQHandler+0x162>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a35      	ldr	r2, [pc, #212]	; (80018a0 <HAL_DMA_IRQHandler+0x1f8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d01a      	beq.n	8001804 <HAL_DMA_IRQHandler+0x15c>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a34      	ldr	r2, [pc, #208]	; (80018a4 <HAL_DMA_IRQHandler+0x1fc>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d012      	beq.n	80017fe <HAL_DMA_IRQHandler+0x156>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a32      	ldr	r2, [pc, #200]	; (80018a8 <HAL_DMA_IRQHandler+0x200>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00a      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x150>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a31      	ldr	r2, [pc, #196]	; (80018ac <HAL_DMA_IRQHandler+0x204>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d102      	bne.n	80017f2 <HAL_DMA_IRQHandler+0x14a>
 80017ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017f0:	e00e      	b.n	8001810 <HAL_DMA_IRQHandler+0x168>
 80017f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017f6:	e00b      	b.n	8001810 <HAL_DMA_IRQHandler+0x168>
 80017f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017fc:	e008      	b.n	8001810 <HAL_DMA_IRQHandler+0x168>
 80017fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001802:	e005      	b.n	8001810 <HAL_DMA_IRQHandler+0x168>
 8001804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001808:	e002      	b.n	8001810 <HAL_DMA_IRQHandler+0x168>
 800180a:	2320      	movs	r3, #32
 800180c:	e000      	b.n	8001810 <HAL_DMA_IRQHandler+0x168>
 800180e:	2302      	movs	r3, #2
 8001810:	4a27      	ldr	r2, [pc, #156]	; (80018b0 <HAL_DMA_IRQHandler+0x208>)
 8001812:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d034      	beq.n	800188e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800182c:	e02f      	b.n	800188e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	2208      	movs	r2, #8
 8001834:	409a      	lsls	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d028      	beq.n	8001890 <HAL_DMA_IRQHandler+0x1e8>
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d023      	beq.n	8001890 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 020e 	bic.w	r2, r2, #14
 8001856:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001860:	2101      	movs	r1, #1
 8001862:	fa01 f202 	lsl.w	r2, r1, r2
 8001866:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	2b00      	cmp	r3, #0
 8001884:	d004      	beq.n	8001890 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	4798      	blx	r3
    }
  }
  return;
 800188e:	bf00      	nop
 8001890:	bf00      	nop
}
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40020008 	.word	0x40020008
 800189c:	4002001c 	.word	0x4002001c
 80018a0:	40020030 	.word	0x40020030
 80018a4:	40020044 	.word	0x40020044
 80018a8:	40020058 	.word	0x40020058
 80018ac:	4002006c 	.word	0x4002006c
 80018b0:	40020000 	.word	0x40020000

080018b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ca:	2101      	movs	r1, #1
 80018cc:	fa01 f202 	lsl.w	r2, r1, r2
 80018d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b10      	cmp	r3, #16
 80018e0:	d108      	bne.n	80018f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018f2:	e007      	b.n	8001904 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	60da      	str	r2, [r3, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
	...

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b08b      	sub	sp, #44	; 0x2c
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001922:	e169      	b.n	8001bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001924:	2201      	movs	r2, #1
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	429a      	cmp	r2, r3
 800193e:	f040 8158 	bne.w	8001bf2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4a9a      	ldr	r2, [pc, #616]	; (8001bb0 <HAL_GPIO_Init+0x2a0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d05e      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 800194c:	4a98      	ldr	r2, [pc, #608]	; (8001bb0 <HAL_GPIO_Init+0x2a0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d875      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 8001952:	4a98      	ldr	r2, [pc, #608]	; (8001bb4 <HAL_GPIO_Init+0x2a4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d058      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 8001958:	4a96      	ldr	r2, [pc, #600]	; (8001bb4 <HAL_GPIO_Init+0x2a4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d86f      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 800195e:	4a96      	ldr	r2, [pc, #600]	; (8001bb8 <HAL_GPIO_Init+0x2a8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d052      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 8001964:	4a94      	ldr	r2, [pc, #592]	; (8001bb8 <HAL_GPIO_Init+0x2a8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d869      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 800196a:	4a94      	ldr	r2, [pc, #592]	; (8001bbc <HAL_GPIO_Init+0x2ac>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d04c      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 8001970:	4a92      	ldr	r2, [pc, #584]	; (8001bbc <HAL_GPIO_Init+0x2ac>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d863      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 8001976:	4a92      	ldr	r2, [pc, #584]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d046      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 800197c:	4a90      	ldr	r2, [pc, #576]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d85d      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 8001982:	2b12      	cmp	r3, #18
 8001984:	d82a      	bhi.n	80019dc <HAL_GPIO_Init+0xcc>
 8001986:	2b12      	cmp	r3, #18
 8001988:	d859      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 800198a:	a201      	add	r2, pc, #4	; (adr r2, 8001990 <HAL_GPIO_Init+0x80>)
 800198c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001990:	08001a0b 	.word	0x08001a0b
 8001994:	080019e5 	.word	0x080019e5
 8001998:	080019f7 	.word	0x080019f7
 800199c:	08001a39 	.word	0x08001a39
 80019a0:	08001a3f 	.word	0x08001a3f
 80019a4:	08001a3f 	.word	0x08001a3f
 80019a8:	08001a3f 	.word	0x08001a3f
 80019ac:	08001a3f 	.word	0x08001a3f
 80019b0:	08001a3f 	.word	0x08001a3f
 80019b4:	08001a3f 	.word	0x08001a3f
 80019b8:	08001a3f 	.word	0x08001a3f
 80019bc:	08001a3f 	.word	0x08001a3f
 80019c0:	08001a3f 	.word	0x08001a3f
 80019c4:	08001a3f 	.word	0x08001a3f
 80019c8:	08001a3f 	.word	0x08001a3f
 80019cc:	08001a3f 	.word	0x08001a3f
 80019d0:	08001a3f 	.word	0x08001a3f
 80019d4:	080019ed 	.word	0x080019ed
 80019d8:	08001a01 	.word	0x08001a01
 80019dc:	4a79      	ldr	r2, [pc, #484]	; (8001bc4 <HAL_GPIO_Init+0x2b4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019e2:	e02c      	b.n	8001a3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	623b      	str	r3, [r7, #32]
          break;
 80019ea:	e029      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	3304      	adds	r3, #4
 80019f2:	623b      	str	r3, [r7, #32]
          break;
 80019f4:	e024      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	3308      	adds	r3, #8
 80019fc:	623b      	str	r3, [r7, #32]
          break;
 80019fe:	e01f      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	330c      	adds	r3, #12
 8001a06:	623b      	str	r3, [r7, #32]
          break;
 8001a08:	e01a      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a12:	2304      	movs	r3, #4
 8001a14:	623b      	str	r3, [r7, #32]
          break;
 8001a16:	e013      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a20:	2308      	movs	r3, #8
 8001a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	611a      	str	r2, [r3, #16]
          break;
 8001a2a:	e009      	b.n	8001a40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	615a      	str	r2, [r3, #20]
          break;
 8001a36:	e003      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
          break;
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          break;
 8001a3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2bff      	cmp	r3, #255	; 0xff
 8001a44:	d801      	bhi.n	8001a4a <HAL_GPIO_Init+0x13a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	e001      	b.n	8001a4e <HAL_GPIO_Init+0x13e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2bff      	cmp	r3, #255	; 0xff
 8001a54:	d802      	bhi.n	8001a5c <HAL_GPIO_Init+0x14c>
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	e002      	b.n	8001a62 <HAL_GPIO_Init+0x152>
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	3b08      	subs	r3, #8
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	210f      	movs	r1, #15
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	401a      	ands	r2, r3
 8001a74:	6a39      	ldr	r1, [r7, #32]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 80b1 	beq.w	8001bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a90:	4b4d      	ldr	r3, [pc, #308]	; (8001bc8 <HAL_GPIO_Init+0x2b8>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a4c      	ldr	r2, [pc, #304]	; (8001bc8 <HAL_GPIO_Init+0x2b8>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <HAL_GPIO_Init+0x2b8>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa8:	4a48      	ldr	r2, [pc, #288]	; (8001bcc <HAL_GPIO_Init+0x2bc>)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a40      	ldr	r2, [pc, #256]	; (8001bd0 <HAL_GPIO_Init+0x2c0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d013      	beq.n	8001afc <HAL_GPIO_Init+0x1ec>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a3f      	ldr	r2, [pc, #252]	; (8001bd4 <HAL_GPIO_Init+0x2c4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d00d      	beq.n	8001af8 <HAL_GPIO_Init+0x1e8>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a3e      	ldr	r2, [pc, #248]	; (8001bd8 <HAL_GPIO_Init+0x2c8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d007      	beq.n	8001af4 <HAL_GPIO_Init+0x1e4>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a3d      	ldr	r2, [pc, #244]	; (8001bdc <HAL_GPIO_Init+0x2cc>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d101      	bne.n	8001af0 <HAL_GPIO_Init+0x1e0>
 8001aec:	2303      	movs	r3, #3
 8001aee:	e006      	b.n	8001afe <HAL_GPIO_Init+0x1ee>
 8001af0:	2304      	movs	r3, #4
 8001af2:	e004      	b.n	8001afe <HAL_GPIO_Init+0x1ee>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e002      	b.n	8001afe <HAL_GPIO_Init+0x1ee>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_GPIO_Init+0x1ee>
 8001afc:	2300      	movs	r3, #0
 8001afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b00:	f002 0203 	and.w	r2, r2, #3
 8001b04:	0092      	lsls	r2, r2, #2
 8001b06:	4093      	lsls	r3, r2
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b0e:	492f      	ldr	r1, [pc, #188]	; (8001bcc <HAL_GPIO_Init+0x2bc>)
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	3302      	adds	r3, #2
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	492c      	ldr	r1, [pc, #176]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b36:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	4928      	ldr	r1, [pc, #160]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	4922      	ldr	r1, [pc, #136]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	491e      	ldr	r1, [pc, #120]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	4918      	ldr	r1, [pc, #96]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	4914      	ldr	r1, [pc, #80]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d021      	beq.n	8001be4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	490e      	ldr	r1, [pc, #56]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60cb      	str	r3, [r1, #12]
 8001bac:	e021      	b.n	8001bf2 <HAL_GPIO_Init+0x2e2>
 8001bae:	bf00      	nop
 8001bb0:	10320000 	.word	0x10320000
 8001bb4:	10310000 	.word	0x10310000
 8001bb8:	10220000 	.word	0x10220000
 8001bbc:	10210000 	.word	0x10210000
 8001bc0:	10120000 	.word	0x10120000
 8001bc4:	10110000 	.word	0x10110000
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010000 	.word	0x40010000
 8001bd0:	40010800 	.word	0x40010800
 8001bd4:	40010c00 	.word	0x40010c00
 8001bd8:	40011000 	.word	0x40011000
 8001bdc:	40011400 	.word	0x40011400
 8001be0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	4909      	ldr	r1, [pc, #36]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f47f ae8e 	bne.w	8001924 <HAL_GPIO_Init+0x14>
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	372c      	adds	r7, #44	; 0x2c
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	40010400 	.word	0x40010400

08001c18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	887b      	ldrh	r3, [r7, #2]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c30:	2301      	movs	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
 8001c34:	e001      	b.n	8001c3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	807b      	strh	r3, [r7, #2]
 8001c52:	4613      	mov	r3, r2
 8001c54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c56:	787b      	ldrb	r3, [r7, #1]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c5c:	887a      	ldrh	r2, [r7, #2]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c62:	e003      	b.n	8001c6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c64:	887b      	ldrh	r3, [r7, #2]
 8001c66:	041a      	lsls	r2, r3, #16
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	611a      	str	r2, [r3, #16]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr

08001c76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b085      	sub	sp, #20
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c88:	887a      	ldrh	r2, [r7, #2]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	041a      	lsls	r2, r3, #16
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	43d9      	mvns	r1, r3
 8001c94:	887b      	ldrh	r3, [r7, #2]
 8001c96:	400b      	ands	r3, r1
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	611a      	str	r2, [r3, #16]
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e26c      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8087 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc8:	4b92      	ldr	r3, [pc, #584]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d00c      	beq.n	8001cee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cd4:	4b8f      	ldr	r3, [pc, #572]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d112      	bne.n	8001d06 <HAL_RCC_OscConfig+0x5e>
 8001ce0:	4b8c      	ldr	r3, [pc, #560]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cec:	d10b      	bne.n	8001d06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cee:	4b89      	ldr	r3, [pc, #548]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d06c      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x12c>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d168      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e246      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_OscConfig+0x76>
 8001d10:	4b80      	ldr	r3, [pc, #512]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a7f      	ldr	r2, [pc, #508]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	e02e      	b.n	8001d7c <HAL_RCC_OscConfig+0xd4>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x98>
 8001d26:	4b7b      	ldr	r3, [pc, #492]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a7a      	ldr	r2, [pc, #488]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b78      	ldr	r3, [pc, #480]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a77      	ldr	r2, [pc, #476]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	e01d      	b.n	8001d7c <HAL_RCC_OscConfig+0xd4>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0xbc>
 8001d4a:	4b72      	ldr	r3, [pc, #456]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a71      	ldr	r2, [pc, #452]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	4b6f      	ldr	r3, [pc, #444]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a6e      	ldr	r2, [pc, #440]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e00b      	b.n	8001d7c <HAL_RCC_OscConfig+0xd4>
 8001d64:	4b6b      	ldr	r3, [pc, #428]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a6a      	ldr	r2, [pc, #424]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b68      	ldr	r3, [pc, #416]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a67      	ldr	r2, [pc, #412]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff fa9a 	bl	80012bc <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d8c:	f7ff fa96 	bl	80012bc <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	; 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e1fa      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b5d      	ldr	r3, [pc, #372]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0xe4>
 8001daa:	e014      	b.n	8001dd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff fa86 	bl	80012bc <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db4:	f7ff fa82 	bl	80012bc <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e1e6      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc6:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x10c>
 8001dd2:	e000      	b.n	8001dd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d063      	beq.n	8001eaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de2:	4b4c      	ldr	r3, [pc, #304]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dee:	4b49      	ldr	r3, [pc, #292]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d11c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x18c>
 8001dfa:	4b46      	ldr	r3, [pc, #280]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d116      	bne.n	8001e34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	4b43      	ldr	r3, [pc, #268]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_RCC_OscConfig+0x176>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e1ba      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1e:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4939      	ldr	r1, [pc, #228]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	e03a      	b.n	8001eaa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d020      	beq.n	8001e7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7ff fa3b 	bl	80012bc <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fa37 	bl	80012bc <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e19b      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e68:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4927      	ldr	r1, [pc, #156]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
 8001e7c:	e015      	b.n	8001eaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff fa1a 	bl	80012bc <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8c:	f7ff fa16 	bl	80012bc <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e17a      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d03a      	beq.n	8001f2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d019      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_RCC_OscConfig+0x274>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7ff f9fa 	bl	80012bc <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7ff f9f6 	bl	80012bc <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e15a      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eea:	2001      	movs	r0, #1
 8001eec:	f000 faa6 	bl	800243c <RCC_Delay>
 8001ef0:	e01c      	b.n	8001f2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_RCC_OscConfig+0x274>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef8:	f7ff f9e0 	bl	80012bc <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efe:	e00f      	b.n	8001f20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f00:	f7ff f9dc 	bl	80012bc <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d908      	bls.n	8001f20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e140      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	42420000 	.word	0x42420000
 8001f1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	4b9e      	ldr	r3, [pc, #632]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1e9      	bne.n	8001f00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80a6 	beq.w	8002086 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3e:	4b97      	ldr	r3, [pc, #604]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10d      	bne.n	8001f66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	4b94      	ldr	r3, [pc, #592]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	4a93      	ldr	r2, [pc, #588]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f54:	61d3      	str	r3, [r2, #28]
 8001f56:	4b91      	ldr	r3, [pc, #580]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f62:	2301      	movs	r3, #1
 8001f64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	4b8e      	ldr	r3, [pc, #568]	; (80021a0 <HAL_RCC_OscConfig+0x4f8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d118      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f72:	4b8b      	ldr	r3, [pc, #556]	; (80021a0 <HAL_RCC_OscConfig+0x4f8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a8a      	ldr	r2, [pc, #552]	; (80021a0 <HAL_RCC_OscConfig+0x4f8>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff f99d 	bl	80012bc <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f86:	f7ff f999 	bl	80012bc <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b64      	cmp	r3, #100	; 0x64
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0fd      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	4b81      	ldr	r3, [pc, #516]	; (80021a0 <HAL_RCC_OscConfig+0x4f8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x312>
 8001fac:	4b7b      	ldr	r3, [pc, #492]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4a7a      	ldr	r2, [pc, #488]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6213      	str	r3, [r2, #32]
 8001fb8:	e02d      	b.n	8002016 <HAL_RCC_OscConfig+0x36e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x334>
 8001fc2:	4b76      	ldr	r3, [pc, #472]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a75      	ldr	r2, [pc, #468]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6213      	str	r3, [r2, #32]
 8001fce:	4b73      	ldr	r3, [pc, #460]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a72      	ldr	r2, [pc, #456]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	6213      	str	r3, [r2, #32]
 8001fda:	e01c      	b.n	8002016 <HAL_RCC_OscConfig+0x36e>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d10c      	bne.n	8001ffe <HAL_RCC_OscConfig+0x356>
 8001fe4:	4b6d      	ldr	r3, [pc, #436]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a6c      	ldr	r2, [pc, #432]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	4b6a      	ldr	r3, [pc, #424]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4a69      	ldr	r2, [pc, #420]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6213      	str	r3, [r2, #32]
 8001ffc:	e00b      	b.n	8002016 <HAL_RCC_OscConfig+0x36e>
 8001ffe:	4b67      	ldr	r3, [pc, #412]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4a66      	ldr	r2, [pc, #408]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6213      	str	r3, [r2, #32]
 800200a:	4b64      	ldr	r3, [pc, #400]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4a63      	ldr	r2, [pc, #396]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d015      	beq.n	800204a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7ff f94d 	bl	80012bc <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7ff f949 	bl	80012bc <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e0ab      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203c:	4b57      	ldr	r3, [pc, #348]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ee      	beq.n	8002026 <HAL_RCC_OscConfig+0x37e>
 8002048:	e014      	b.n	8002074 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7ff f937 	bl	80012bc <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002050:	e00a      	b.n	8002068 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7ff f933 	bl	80012bc <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e095      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002068:	4b4c      	ldr	r3, [pc, #304]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ee      	bne.n	8002052 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d105      	bne.n	8002086 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207a:	4b48      	ldr	r3, [pc, #288]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4a47      	ldr	r2, [pc, #284]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8002080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002084:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8081 	beq.w	8002192 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002090:	4b42      	ldr	r3, [pc, #264]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b08      	cmp	r3, #8
 800209a:	d061      	beq.n	8002160 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d146      	bne.n	8002132 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a4:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <HAL_RCC_OscConfig+0x4fc>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7ff f907 	bl	80012bc <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7ff f903 	bl	80012bc <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e067      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d8:	d108      	bne.n	80020ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020da:	4b30      	ldr	r3, [pc, #192]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	492d      	ldr	r1, [pc, #180]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ec:	4b2b      	ldr	r3, [pc, #172]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a19      	ldr	r1, [r3, #32]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	430b      	orrs	r3, r1
 80020fe:	4927      	ldr	r1, [pc, #156]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002104:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <HAL_RCC_OscConfig+0x4fc>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7ff f8d7 	bl	80012bc <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002112:	f7ff f8d3 	bl	80012bc <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e037      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x46a>
 8002130:	e02f      	b.n	8002192 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002132:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <HAL_RCC_OscConfig+0x4fc>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff f8c0 	bl	80012bc <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002140:	f7ff f8bc 	bl	80012bc <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e020      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x498>
 800215e:	e018      	b.n	8002192 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e013      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_OscConfig+0x4f4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	429a      	cmp	r2, r3
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d001      	beq.n	8002192 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000
 80021a0:	40007000 	.word	0x40007000
 80021a4:	42420060 	.word	0x42420060

080021a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0d0      	b.n	800235e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021bc:	4b6a      	ldr	r3, [pc, #424]	; (8002368 <HAL_RCC_ClockConfig+0x1c0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d910      	bls.n	80021ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b67      	ldr	r3, [pc, #412]	; (8002368 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 0207 	bic.w	r2, r3, #7
 80021d2:	4965      	ldr	r1, [pc, #404]	; (8002368 <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b63      	ldr	r3, [pc, #396]	; (8002368 <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0b8      	b.n	800235e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d020      	beq.n	800223a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002204:	4b59      	ldr	r3, [pc, #356]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a58      	ldr	r2, [pc, #352]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800220e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800221c:	4b53      	ldr	r3, [pc, #332]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a52      	ldr	r2, [pc, #328]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002226:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002228:	4b50      	ldr	r3, [pc, #320]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	494d      	ldr	r1, [pc, #308]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d040      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d107      	bne.n	800225e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b47      	ldr	r3, [pc, #284]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d115      	bne.n	8002286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e07f      	b.n	800235e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002266:	4b41      	ldr	r3, [pc, #260]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e073      	b.n	800235e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002276:	4b3d      	ldr	r3, [pc, #244]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e06b      	b.n	800235e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002286:	4b39      	ldr	r3, [pc, #228]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f023 0203 	bic.w	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4936      	ldr	r1, [pc, #216]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002298:	f7ff f810 	bl	80012bc <HAL_GetTick>
 800229c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229e:	e00a      	b.n	80022b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a0:	f7ff f80c 	bl	80012bc <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e053      	b.n	800235e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	4b2d      	ldr	r3, [pc, #180]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 020c 	and.w	r2, r3, #12
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d1eb      	bne.n	80022a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <HAL_RCC_ClockConfig+0x1c0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d210      	bcs.n	80022f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b24      	ldr	r3, [pc, #144]	; (8002368 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 0207 	bic.w	r2, r3, #7
 80022de:	4922      	ldr	r1, [pc, #136]	; (8002368 <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e032      	b.n	800235e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4916      	ldr	r1, [pc, #88]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002322:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	490e      	ldr	r1, [pc, #56]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002336:	f000 f821 	bl	800237c <HAL_RCC_GetSysClockFreq>
 800233a:	4602      	mov	r2, r0
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	490a      	ldr	r1, [pc, #40]	; (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 8002348:	5ccb      	ldrb	r3, [r1, r3]
 800234a:	fa22 f303 	lsr.w	r3, r2, r3
 800234e:	4a09      	ldr	r2, [pc, #36]	; (8002374 <HAL_RCC_ClockConfig+0x1cc>)
 8002350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <HAL_RCC_ClockConfig+0x1d0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe ff6e 	bl	8001238 <HAL_InitTick>

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40022000 	.word	0x40022000
 800236c:	40021000 	.word	0x40021000
 8002370:	080044cc 	.word	0x080044cc
 8002374:	20000000 	.word	0x20000000
 8002378:	20000004 	.word	0x20000004

0800237c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800237c:	b490      	push	{r4, r7}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002382:	4b2a      	ldr	r3, [pc, #168]	; (800242c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002384:	1d3c      	adds	r4, r7, #4
 8002386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002388:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800238c:	f240 2301 	movw	r3, #513	; 0x201
 8002390:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023a6:	4b22      	ldr	r3, [pc, #136]	; (8002430 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d002      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0x40>
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d003      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0x46>
 80023ba:	e02d      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023bc:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023be:	623b      	str	r3, [r7, #32]
      break;
 80023c0:	e02d      	b.n	800241e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	0c9b      	lsrs	r3, r3, #18
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023ce:	4413      	add	r3, r2
 80023d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	0c5b      	lsrs	r3, r3, #17
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023ee:	4413      	add	r3, r2
 80023f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023fa:	fb02 f203 	mul.w	r2, r2, r3
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	fbb2 f3f3 	udiv	r3, r2, r3
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
 8002406:	e004      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <HAL_RCC_GetSysClockFreq+0xbc>)
 800240c:	fb02 f303 	mul.w	r3, r2, r3
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	623b      	str	r3, [r7, #32]
      break;
 8002416:	e002      	b.n	800241e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_RCC_GetSysClockFreq+0xb8>)
 800241a:	623b      	str	r3, [r7, #32]
      break;
 800241c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800241e:	6a3b      	ldr	r3, [r7, #32]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3728      	adds	r7, #40	; 0x28
 8002424:	46bd      	mov	sp, r7
 8002426:	bc90      	pop	{r4, r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	080044bc 	.word	0x080044bc
 8002430:	40021000 	.word	0x40021000
 8002434:	007a1200 	.word	0x007a1200
 8002438:	003d0900 	.word	0x003d0900

0800243c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <RCC_Delay+0x34>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <RCC_Delay+0x38>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0a5b      	lsrs	r3, r3, #9
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002458:	bf00      	nop
  }
  while (Delay --);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1e5a      	subs	r2, r3, #1
 800245e:	60fa      	str	r2, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f9      	bne.n	8002458 <RCC_Delay+0x1c>
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	20000000 	.word	0x20000000
 8002474:	10624dd3 	.word	0x10624dd3

08002478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e076      	b.n	8002578 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	2b00      	cmp	r3, #0
 8002490:	d108      	bne.n	80024a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800249a:	d009      	beq.n	80024b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	61da      	str	r2, [r3, #28]
 80024a2:	e005      	b.n	80024b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fcdc 	bl	8000e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002534:	ea42 0103 	orr.w	r1, r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	0c1a      	lsrs	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f002 0204 	and.w	r2, r2, #4
 8002556:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002566:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	4613      	mov	r3, r2
 800258e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_SPI_Transmit+0x22>
 800259e:	2302      	movs	r3, #2
 80025a0:	e126      	b.n	80027f0 <HAL_SPI_Transmit+0x270>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025aa:	f7fe fe87 	bl	80012bc <HAL_GetTick>
 80025ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d002      	beq.n	80025c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025c0:	2302      	movs	r3, #2
 80025c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025c4:	e10b      	b.n	80027de <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_SPI_Transmit+0x52>
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025d6:	e102      	b.n	80027de <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2203      	movs	r2, #3
 80025dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	88fa      	ldrh	r2, [r7, #6]
 80025f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	88fa      	ldrh	r2, [r7, #6]
 80025f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800261e:	d10f      	bne.n	8002640 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800262e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800263e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b40      	cmp	r3, #64	; 0x40
 800264c:	d007      	beq.n	800265e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800265c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002666:	d14b      	bne.n	8002700 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <HAL_SPI_Transmit+0xf6>
 8002670:	8afb      	ldrh	r3, [r7, #22]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d13e      	bne.n	80026f4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	881a      	ldrh	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	1c9a      	adds	r2, r3, #2
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800269a:	e02b      	b.n	80026f4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d112      	bne.n	80026d0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	881a      	ldrh	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	1c9a      	adds	r2, r3, #2
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80026ce:	e011      	b.n	80026f4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026d0:	f7fe fdf4 	bl	80012bc <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d803      	bhi.n	80026e8 <HAL_SPI_Transmit+0x168>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e6:	d102      	bne.n	80026ee <HAL_SPI_Transmit+0x16e>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d102      	bne.n	80026f4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026f2:	e074      	b.n	80027de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1ce      	bne.n	800269c <HAL_SPI_Transmit+0x11c>
 80026fe:	e04c      	b.n	800279a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <HAL_SPI_Transmit+0x18e>
 8002708:	8afb      	ldrh	r3, [r7, #22]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d140      	bne.n	8002790 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	330c      	adds	r3, #12
 8002718:	7812      	ldrb	r2, [r2, #0]
 800271a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002734:	e02c      	b.n	8002790 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b02      	cmp	r3, #2
 8002742:	d113      	bne.n	800276c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	330c      	adds	r3, #12
 800274e:	7812      	ldrb	r2, [r2, #0]
 8002750:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	86da      	strh	r2, [r3, #54]	; 0x36
 800276a:	e011      	b.n	8002790 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800276c:	f7fe fda6 	bl	80012bc <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d803      	bhi.n	8002784 <HAL_SPI_Transmit+0x204>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002782:	d102      	bne.n	800278a <HAL_SPI_Transmit+0x20a>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800278e:	e026      	b.n	80027de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1cd      	bne.n	8002736 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	6839      	ldr	r1, [r7, #0]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f9fc 	bl	8002b9c <SPI_EndRxTxTransaction>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	77fb      	strb	r3, [r7, #31]
 80027da:	e000      	b.n	80027de <HAL_SPI_Transmit+0x25e>
  }

error:
 80027dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3720      	adds	r7, #32
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	4613      	mov	r3, r2
 8002804:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_SPI_Transmit_DMA+0x20>
 8002814:	2302      	movs	r3, #2
 8002816:	e09b      	b.n	8002950 <HAL_SPI_Transmit_DMA+0x158>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d002      	beq.n	8002832 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800282c:	2302      	movs	r3, #2
 800282e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002830:	e089      	b.n	8002946 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <HAL_SPI_Transmit_DMA+0x46>
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002842:	e080      	b.n	8002946 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2203      	movs	r2, #3
 8002848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	88fa      	ldrh	r2, [r7, #6]
 800285c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	88fa      	ldrh	r2, [r7, #6]
 8002862:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800288a:	d10f      	bne.n	80028ac <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800289a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b0:	4a29      	ldr	r2, [pc, #164]	; (8002958 <HAL_SPI_Transmit_DMA+0x160>)
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b8:	4a28      	ldr	r2, [pc, #160]	; (800295c <HAL_SPI_Transmit_DMA+0x164>)
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c0:	4a27      	ldr	r2, [pc, #156]	; (8002960 <HAL_SPI_Transmit_DMA+0x168>)
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c8:	2200      	movs	r2, #0
 80028ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	4619      	mov	r1, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	330c      	adds	r3, #12
 80028dc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80028e4:	f7fe fe80 	bl	80015e8 <HAL_DMA_Start_IT>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00c      	beq.n	8002908 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f2:	f043 0210 	orr.w	r2, r3, #16
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002906:	e01e      	b.n	8002946 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002912:	2b40      	cmp	r3, #64	; 0x40
 8002914:	d007      	beq.n	8002926 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002924:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0220 	orr.w	r2, r2, #32
 8002934:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0202 	orr.w	r2, r2, #2
 8002944:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800294e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	08002a2f 	.word	0x08002a2f
 800295c:	08002989 	.word	0x08002989
 8002960:	08002a4b 	.word	0x08002a4b

08002964 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002996:	f7fe fc91 	bl	80012bc <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d03b      	beq.n	8002a22 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0220 	bic.w	r2, r2, #32
 80029b8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0202 	bic.w	r2, r2, #2
 80029c8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	2164      	movs	r1, #100	; 0x64
 80029ce:	6978      	ldr	r0, [r7, #20]
 80029d0:	f000 f8e4 	bl	8002b9c <SPI_EndRxTxTransaction>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10a      	bne.n	8002a04 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2200      	movs	r2, #0
 8002a08:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002a1a:	6978      	ldr	r0, [r7, #20]
 8002a1c:	f7ff ffab 	bl	8002976 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002a20:	e002      	b.n	8002a28 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	f7fd fb92 	bl	800014c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff ff91 	bl	8002964 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0203 	bic.w	r2, r2, #3
 8002a66:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	f043 0210 	orr.w	r2, r3, #16
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7ff ff7a 	bl	8002976 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a9c:	f7fe fc0e 	bl	80012bc <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002aac:	f7fe fc06 	bl	80012bc <HAL_GetTick>
 8002ab0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ab2:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	015b      	lsls	r3, r3, #5
 8002ab8:	0d1b      	lsrs	r3, r3, #20
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	fb02 f303 	mul.w	r3, r2, r3
 8002ac0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ac2:	e054      	b.n	8002b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aca:	d050      	beq.n	8002b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002acc:	f7fe fbf6 	bl	80012bc <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d902      	bls.n	8002ae2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d13d      	bne.n	8002b5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002af0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002afa:	d111      	bne.n	8002b20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b04:	d004      	beq.n	8002b10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0e:	d107      	bne.n	8002b20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b28:	d10f      	bne.n	8002b4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e017      	b.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4013      	ands	r3, r2
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	bf0c      	ite	eq
 8002b7e:	2301      	moveq	r3, #1
 8002b80:	2300      	movne	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d19b      	bne.n	8002ac4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3720      	adds	r7, #32
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000000 	.word	0x20000000

08002b9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2180      	movs	r1, #128	; 0x80
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f7ff ff6a 	bl	8002a8c <SPI_WaitFlagStateUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc2:	f043 0220 	orr.w	r2, r3, #32
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e000      	b.n	8002bd0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e041      	b.n	8002c6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe f9b8 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3304      	adds	r3, #4
 8002c14:	4619      	mov	r1, r3
 8002c16:	4610      	mov	r0, r2
 8002c18:	f000 fa70 	bl	80030fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d001      	beq.n	8002c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e03a      	b.n	8002d06 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <HAL_TIM_Base_Start_IT+0x98>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00e      	beq.n	8002cd0 <HAL_TIM_Base_Start_IT+0x58>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cba:	d009      	beq.n	8002cd0 <HAL_TIM_Base_Start_IT+0x58>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <HAL_TIM_Base_Start_IT+0x9c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_TIM_Base_Start_IT+0x58>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a13      	ldr	r2, [pc, #76]	; (8002d18 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d111      	bne.n	8002cf4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d010      	beq.n	8002d04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0201 	orr.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf2:	e007      	b.n	8002d04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	40012c00 	.word	0x40012c00
 8002d14:	40000400 	.word	0x40000400
 8002d18:	40000800 	.word	0x40000800

08002d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d122      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d11b      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0202 	mvn.w	r2, #2
 8002d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f9b1 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f9a4 	bl	80030b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f9b3 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d122      	bne.n	8002dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d11b      	bne.n	8002dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0204 	mvn.w	r2, #4
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f987 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002db8:	e005      	b.n	8002dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f97a 	bl	80030b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f989 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d122      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d11b      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0208 	mvn.w	r2, #8
 8002df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2204      	movs	r2, #4
 8002df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f95d 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002e0c:	e005      	b.n	8002e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f950 	bl	80030b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f95f 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d122      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d11b      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0210 	mvn.w	r2, #16
 8002e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2208      	movs	r2, #8
 8002e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f933 	bl	80030c6 <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f926 	bl	80030b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f935 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10e      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d107      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0201 	mvn.w	r2, #1
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd f964 	bl	8000168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	2b80      	cmp	r3, #128	; 0x80
 8002eac:	d10e      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb8:	2b80      	cmp	r3, #128	; 0x80
 8002eba:	d107      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fa77 	bl	80033ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f8f9 	bl	80030ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d10e      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d107      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0220 	mvn.w	r2, #32
 8002f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fa42 	bl	80033a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_TIM_ConfigClockSource+0x18>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e0b3      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x180>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f7c:	d03e      	beq.n	8002ffc <HAL_TIM_ConfigClockSource+0xd0>
 8002f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f82:	f200 8087 	bhi.w	8003094 <HAL_TIM_ConfigClockSource+0x168>
 8002f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8a:	f000 8085 	beq.w	8003098 <HAL_TIM_ConfigClockSource+0x16c>
 8002f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f92:	d87f      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x168>
 8002f94:	2b70      	cmp	r3, #112	; 0x70
 8002f96:	d01a      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0xa2>
 8002f98:	2b70      	cmp	r3, #112	; 0x70
 8002f9a:	d87b      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x168>
 8002f9c:	2b60      	cmp	r3, #96	; 0x60
 8002f9e:	d050      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x116>
 8002fa0:	2b60      	cmp	r3, #96	; 0x60
 8002fa2:	d877      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x168>
 8002fa4:	2b50      	cmp	r3, #80	; 0x50
 8002fa6:	d03c      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0xf6>
 8002fa8:	2b50      	cmp	r3, #80	; 0x50
 8002faa:	d873      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x168>
 8002fac:	2b40      	cmp	r3, #64	; 0x40
 8002fae:	d058      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x136>
 8002fb0:	2b40      	cmp	r3, #64	; 0x40
 8002fb2:	d86f      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x168>
 8002fb4:	2b30      	cmp	r3, #48	; 0x30
 8002fb6:	d064      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x156>
 8002fb8:	2b30      	cmp	r3, #48	; 0x30
 8002fba:	d86b      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x168>
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d060      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x156>
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d867      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x168>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d05c      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x156>
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d05a      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002fcc:	e062      	b.n	8003094 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6899      	ldr	r1, [r3, #8]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f000 f966 	bl	80032ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ff0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	609a      	str	r2, [r3, #8]
      break;
 8002ffa:	e04e      	b.n	800309a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6899      	ldr	r1, [r3, #8]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f000 f94f 	bl	80032ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800301e:	609a      	str	r2, [r3, #8]
      break;
 8003020:	e03b      	b.n	800309a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	461a      	mov	r2, r3
 8003030:	f000 f8c6 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2150      	movs	r1, #80	; 0x50
 800303a:	4618      	mov	r0, r3
 800303c:	f000 f91d 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8003040:	e02b      	b.n	800309a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	461a      	mov	r2, r3
 8003050:	f000 f8e4 	bl	800321c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2160      	movs	r1, #96	; 0x60
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f90d 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8003060:	e01b      	b.n	800309a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6859      	ldr	r1, [r3, #4]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	461a      	mov	r2, r3
 8003070:	f000 f8a6 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2140      	movs	r1, #64	; 0x40
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f8fd 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8003080:	e00b      	b.n	800309a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f000 f8f4 	bl	800327a <TIM_ITRx_SetConfig>
        break;
 8003092:	e002      	b.n	800309a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003094:	bf00      	nop
 8003096:	e000      	b.n	800309a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003098:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr

080030ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a29      	ldr	r2, [pc, #164]	; (80031b4 <TIM_Base_SetConfig+0xb8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00b      	beq.n	800312c <TIM_Base_SetConfig+0x30>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311a:	d007      	beq.n	800312c <TIM_Base_SetConfig+0x30>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a26      	ldr	r2, [pc, #152]	; (80031b8 <TIM_Base_SetConfig+0xbc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d003      	beq.n	800312c <TIM_Base_SetConfig+0x30>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a25      	ldr	r2, [pc, #148]	; (80031bc <TIM_Base_SetConfig+0xc0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d108      	bne.n	800313e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <TIM_Base_SetConfig+0xb8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00b      	beq.n	800315e <TIM_Base_SetConfig+0x62>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314c:	d007      	beq.n	800315e <TIM_Base_SetConfig+0x62>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <TIM_Base_SetConfig+0xbc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d003      	beq.n	800315e <TIM_Base_SetConfig+0x62>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a18      	ldr	r2, [pc, #96]	; (80031bc <TIM_Base_SetConfig+0xc0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d108      	bne.n	8003170 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <TIM_Base_SetConfig+0xb8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d103      	bne.n	80031a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	615a      	str	r2, [r3, #20]
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800

080031c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f023 0201 	bic.w	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f023 030a 	bic.w	r3, r3, #10
 80031fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	621a      	str	r2, [r3, #32]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f023 0210 	bic.w	r2, r3, #16
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003246:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	031b      	lsls	r3, r3, #12
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003258:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	621a      	str	r2, [r3, #32]
}
 8003270:	bf00      	nop
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	f043 0307 	orr.w	r3, r3, #7
 800329c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	609a      	str	r2, [r3, #8]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b087      	sub	sp, #28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	021a      	lsls	r2, r3, #8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	431a      	orrs	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	609a      	str	r2, [r3, #8]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003300:	2302      	movs	r3, #2
 8003302:	e046      	b.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a16      	ldr	r2, [pc, #88]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00e      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003350:	d009      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10c      	bne.n	8003380 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800336c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4313      	orrs	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800

080033a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr

080033ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <__errno>:
 80033cc:	4b01      	ldr	r3, [pc, #4]	; (80033d4 <__errno+0x8>)
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	2000000c 	.word	0x2000000c

080033d8 <__libc_init_array>:
 80033d8:	b570      	push	{r4, r5, r6, lr}
 80033da:	2600      	movs	r6, #0
 80033dc:	4d0c      	ldr	r5, [pc, #48]	; (8003410 <__libc_init_array+0x38>)
 80033de:	4c0d      	ldr	r4, [pc, #52]	; (8003414 <__libc_init_array+0x3c>)
 80033e0:	1b64      	subs	r4, r4, r5
 80033e2:	10a4      	asrs	r4, r4, #2
 80033e4:	42a6      	cmp	r6, r4
 80033e6:	d109      	bne.n	80033fc <__libc_init_array+0x24>
 80033e8:	f001 f85c 	bl	80044a4 <_init>
 80033ec:	2600      	movs	r6, #0
 80033ee:	4d0a      	ldr	r5, [pc, #40]	; (8003418 <__libc_init_array+0x40>)
 80033f0:	4c0a      	ldr	r4, [pc, #40]	; (800341c <__libc_init_array+0x44>)
 80033f2:	1b64      	subs	r4, r4, r5
 80033f4:	10a4      	asrs	r4, r4, #2
 80033f6:	42a6      	cmp	r6, r4
 80033f8:	d105      	bne.n	8003406 <__libc_init_array+0x2e>
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003400:	4798      	blx	r3
 8003402:	3601      	adds	r6, #1
 8003404:	e7ee      	b.n	80033e4 <__libc_init_array+0xc>
 8003406:	f855 3b04 	ldr.w	r3, [r5], #4
 800340a:	4798      	blx	r3
 800340c:	3601      	adds	r6, #1
 800340e:	e7f2      	b.n	80033f6 <__libc_init_array+0x1e>
 8003410:	08004628 	.word	0x08004628
 8003414:	08004628 	.word	0x08004628
 8003418:	08004628 	.word	0x08004628
 800341c:	0800462c 	.word	0x0800462c

08003420 <memset>:
 8003420:	4603      	mov	r3, r0
 8003422:	4402      	add	r2, r0
 8003424:	4293      	cmp	r3, r2
 8003426:	d100      	bne.n	800342a <memset+0xa>
 8003428:	4770      	bx	lr
 800342a:	f803 1b01 	strb.w	r1, [r3], #1
 800342e:	e7f9      	b.n	8003424 <memset+0x4>

08003430 <srand>:
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <srand+0x44>)
 8003434:	4604      	mov	r4, r0
 8003436:	681d      	ldr	r5, [r3, #0]
 8003438:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800343a:	b9b3      	cbnz	r3, 800346a <srand+0x3a>
 800343c:	2018      	movs	r0, #24
 800343e:	f000 f895 	bl	800356c <malloc>
 8003442:	4602      	mov	r2, r0
 8003444:	63a8      	str	r0, [r5, #56]	; 0x38
 8003446:	b920      	cbnz	r0, 8003452 <srand+0x22>
 8003448:	2142      	movs	r1, #66	; 0x42
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <srand+0x48>)
 800344c:	480b      	ldr	r0, [pc, #44]	; (800347c <srand+0x4c>)
 800344e:	f000 f85d 	bl	800350c <__assert_func>
 8003452:	490b      	ldr	r1, [pc, #44]	; (8003480 <srand+0x50>)
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <srand+0x54>)
 8003456:	e9c0 1300 	strd	r1, r3, [r0]
 800345a:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <srand+0x58>)
 800345c:	2100      	movs	r1, #0
 800345e:	6083      	str	r3, [r0, #8]
 8003460:	230b      	movs	r3, #11
 8003462:	8183      	strh	r3, [r0, #12]
 8003464:	2001      	movs	r0, #1
 8003466:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800346a:	2200      	movs	r2, #0
 800346c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800346e:	611c      	str	r4, [r3, #16]
 8003470:	615a      	str	r2, [r3, #20]
 8003472:	bd38      	pop	{r3, r4, r5, pc}
 8003474:	2000000c 	.word	0x2000000c
 8003478:	080044e0 	.word	0x080044e0
 800347c:	080044f7 	.word	0x080044f7
 8003480:	abcd330e 	.word	0xabcd330e
 8003484:	e66d1234 	.word	0xe66d1234
 8003488:	0005deec 	.word	0x0005deec

0800348c <rand>:
 800348c:	4b17      	ldr	r3, [pc, #92]	; (80034ec <rand+0x60>)
 800348e:	b510      	push	{r4, lr}
 8003490:	681c      	ldr	r4, [r3, #0]
 8003492:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003494:	b9b3      	cbnz	r3, 80034c4 <rand+0x38>
 8003496:	2018      	movs	r0, #24
 8003498:	f000 f868 	bl	800356c <malloc>
 800349c:	4602      	mov	r2, r0
 800349e:	63a0      	str	r0, [r4, #56]	; 0x38
 80034a0:	b920      	cbnz	r0, 80034ac <rand+0x20>
 80034a2:	214e      	movs	r1, #78	; 0x4e
 80034a4:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <rand+0x64>)
 80034a6:	4813      	ldr	r0, [pc, #76]	; (80034f4 <rand+0x68>)
 80034a8:	f000 f830 	bl	800350c <__assert_func>
 80034ac:	4912      	ldr	r1, [pc, #72]	; (80034f8 <rand+0x6c>)
 80034ae:	4b13      	ldr	r3, [pc, #76]	; (80034fc <rand+0x70>)
 80034b0:	e9c0 1300 	strd	r1, r3, [r0]
 80034b4:	4b12      	ldr	r3, [pc, #72]	; (8003500 <rand+0x74>)
 80034b6:	2100      	movs	r1, #0
 80034b8:	6083      	str	r3, [r0, #8]
 80034ba:	230b      	movs	r3, #11
 80034bc:	8183      	strh	r3, [r0, #12]
 80034be:	2001      	movs	r0, #1
 80034c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80034c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80034c6:	480f      	ldr	r0, [pc, #60]	; (8003504 <rand+0x78>)
 80034c8:	690a      	ldr	r2, [r1, #16]
 80034ca:	694b      	ldr	r3, [r1, #20]
 80034cc:	4350      	muls	r0, r2
 80034ce:	4c0e      	ldr	r4, [pc, #56]	; (8003508 <rand+0x7c>)
 80034d0:	fb04 0003 	mla	r0, r4, r3, r0
 80034d4:	fba2 3404 	umull	r3, r4, r2, r4
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	4404      	add	r4, r0
 80034dc:	f144 0000 	adc.w	r0, r4, #0
 80034e0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80034e4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80034e8:	bd10      	pop	{r4, pc}
 80034ea:	bf00      	nop
 80034ec:	2000000c 	.word	0x2000000c
 80034f0:	080044e0 	.word	0x080044e0
 80034f4:	080044f7 	.word	0x080044f7
 80034f8:	abcd330e 	.word	0xabcd330e
 80034fc:	e66d1234 	.word	0xe66d1234
 8003500:	0005deec 	.word	0x0005deec
 8003504:	5851f42d 	.word	0x5851f42d
 8003508:	4c957f2d 	.word	0x4c957f2d

0800350c <__assert_func>:
 800350c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800350e:	4614      	mov	r4, r2
 8003510:	461a      	mov	r2, r3
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <__assert_func+0x2c>)
 8003514:	4605      	mov	r5, r0
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68d8      	ldr	r0, [r3, #12]
 800351a:	b14c      	cbz	r4, 8003530 <__assert_func+0x24>
 800351c:	4b07      	ldr	r3, [pc, #28]	; (800353c <__assert_func+0x30>)
 800351e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003522:	9100      	str	r1, [sp, #0]
 8003524:	462b      	mov	r3, r5
 8003526:	4906      	ldr	r1, [pc, #24]	; (8003540 <__assert_func+0x34>)
 8003528:	f000 f80e 	bl	8003548 <fiprintf>
 800352c:	f000 fc8a 	bl	8003e44 <abort>
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <__assert_func+0x38>)
 8003532:	461c      	mov	r4, r3
 8003534:	e7f3      	b.n	800351e <__assert_func+0x12>
 8003536:	bf00      	nop
 8003538:	2000000c 	.word	0x2000000c
 800353c:	08004556 	.word	0x08004556
 8003540:	08004563 	.word	0x08004563
 8003544:	08004591 	.word	0x08004591

08003548 <fiprintf>:
 8003548:	b40e      	push	{r1, r2, r3}
 800354a:	b503      	push	{r0, r1, lr}
 800354c:	4601      	mov	r1, r0
 800354e:	ab03      	add	r3, sp, #12
 8003550:	4805      	ldr	r0, [pc, #20]	; (8003568 <fiprintf+0x20>)
 8003552:	f853 2b04 	ldr.w	r2, [r3], #4
 8003556:	6800      	ldr	r0, [r0, #0]
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	f000 f8dd 	bl	8003718 <_vfiprintf_r>
 800355e:	b002      	add	sp, #8
 8003560:	f85d eb04 	ldr.w	lr, [sp], #4
 8003564:	b003      	add	sp, #12
 8003566:	4770      	bx	lr
 8003568:	2000000c 	.word	0x2000000c

0800356c <malloc>:
 800356c:	4b02      	ldr	r3, [pc, #8]	; (8003578 <malloc+0xc>)
 800356e:	4601      	mov	r1, r0
 8003570:	6818      	ldr	r0, [r3, #0]
 8003572:	f000 b84f 	b.w	8003614 <_malloc_r>
 8003576:	bf00      	nop
 8003578:	2000000c 	.word	0x2000000c

0800357c <_free_r>:
 800357c:	b538      	push	{r3, r4, r5, lr}
 800357e:	4605      	mov	r5, r0
 8003580:	2900      	cmp	r1, #0
 8003582:	d043      	beq.n	800360c <_free_r+0x90>
 8003584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003588:	1f0c      	subs	r4, r1, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	bfb8      	it	lt
 800358e:	18e4      	addlt	r4, r4, r3
 8003590:	f000 fe8c 	bl	80042ac <__malloc_lock>
 8003594:	4a1e      	ldr	r2, [pc, #120]	; (8003610 <_free_r+0x94>)
 8003596:	6813      	ldr	r3, [r2, #0]
 8003598:	4610      	mov	r0, r2
 800359a:	b933      	cbnz	r3, 80035aa <_free_r+0x2e>
 800359c:	6063      	str	r3, [r4, #4]
 800359e:	6014      	str	r4, [r2, #0]
 80035a0:	4628      	mov	r0, r5
 80035a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035a6:	f000 be87 	b.w	80042b8 <__malloc_unlock>
 80035aa:	42a3      	cmp	r3, r4
 80035ac:	d90a      	bls.n	80035c4 <_free_r+0x48>
 80035ae:	6821      	ldr	r1, [r4, #0]
 80035b0:	1862      	adds	r2, r4, r1
 80035b2:	4293      	cmp	r3, r2
 80035b4:	bf01      	itttt	eq
 80035b6:	681a      	ldreq	r2, [r3, #0]
 80035b8:	685b      	ldreq	r3, [r3, #4]
 80035ba:	1852      	addeq	r2, r2, r1
 80035bc:	6022      	streq	r2, [r4, #0]
 80035be:	6063      	str	r3, [r4, #4]
 80035c0:	6004      	str	r4, [r0, #0]
 80035c2:	e7ed      	b.n	80035a0 <_free_r+0x24>
 80035c4:	461a      	mov	r2, r3
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	b10b      	cbz	r3, 80035ce <_free_r+0x52>
 80035ca:	42a3      	cmp	r3, r4
 80035cc:	d9fa      	bls.n	80035c4 <_free_r+0x48>
 80035ce:	6811      	ldr	r1, [r2, #0]
 80035d0:	1850      	adds	r0, r2, r1
 80035d2:	42a0      	cmp	r0, r4
 80035d4:	d10b      	bne.n	80035ee <_free_r+0x72>
 80035d6:	6820      	ldr	r0, [r4, #0]
 80035d8:	4401      	add	r1, r0
 80035da:	1850      	adds	r0, r2, r1
 80035dc:	4283      	cmp	r3, r0
 80035de:	6011      	str	r1, [r2, #0]
 80035e0:	d1de      	bne.n	80035a0 <_free_r+0x24>
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4401      	add	r1, r0
 80035e8:	6011      	str	r1, [r2, #0]
 80035ea:	6053      	str	r3, [r2, #4]
 80035ec:	e7d8      	b.n	80035a0 <_free_r+0x24>
 80035ee:	d902      	bls.n	80035f6 <_free_r+0x7a>
 80035f0:	230c      	movs	r3, #12
 80035f2:	602b      	str	r3, [r5, #0]
 80035f4:	e7d4      	b.n	80035a0 <_free_r+0x24>
 80035f6:	6820      	ldr	r0, [r4, #0]
 80035f8:	1821      	adds	r1, r4, r0
 80035fa:	428b      	cmp	r3, r1
 80035fc:	bf01      	itttt	eq
 80035fe:	6819      	ldreq	r1, [r3, #0]
 8003600:	685b      	ldreq	r3, [r3, #4]
 8003602:	1809      	addeq	r1, r1, r0
 8003604:	6021      	streq	r1, [r4, #0]
 8003606:	6063      	str	r3, [r4, #4]
 8003608:	6054      	str	r4, [r2, #4]
 800360a:	e7c9      	b.n	80035a0 <_free_r+0x24>
 800360c:	bd38      	pop	{r3, r4, r5, pc}
 800360e:	bf00      	nop
 8003610:	20000090 	.word	0x20000090

08003614 <_malloc_r>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	1ccd      	adds	r5, r1, #3
 8003618:	f025 0503 	bic.w	r5, r5, #3
 800361c:	3508      	adds	r5, #8
 800361e:	2d0c      	cmp	r5, #12
 8003620:	bf38      	it	cc
 8003622:	250c      	movcc	r5, #12
 8003624:	2d00      	cmp	r5, #0
 8003626:	4606      	mov	r6, r0
 8003628:	db01      	blt.n	800362e <_malloc_r+0x1a>
 800362a:	42a9      	cmp	r1, r5
 800362c:	d903      	bls.n	8003636 <_malloc_r+0x22>
 800362e:	230c      	movs	r3, #12
 8003630:	6033      	str	r3, [r6, #0]
 8003632:	2000      	movs	r0, #0
 8003634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003636:	f000 fe39 	bl	80042ac <__malloc_lock>
 800363a:	4921      	ldr	r1, [pc, #132]	; (80036c0 <_malloc_r+0xac>)
 800363c:	680a      	ldr	r2, [r1, #0]
 800363e:	4614      	mov	r4, r2
 8003640:	b99c      	cbnz	r4, 800366a <_malloc_r+0x56>
 8003642:	4f20      	ldr	r7, [pc, #128]	; (80036c4 <_malloc_r+0xb0>)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	b923      	cbnz	r3, 8003652 <_malloc_r+0x3e>
 8003648:	4621      	mov	r1, r4
 800364a:	4630      	mov	r0, r6
 800364c:	f000 fb2a 	bl	8003ca4 <_sbrk_r>
 8003650:	6038      	str	r0, [r7, #0]
 8003652:	4629      	mov	r1, r5
 8003654:	4630      	mov	r0, r6
 8003656:	f000 fb25 	bl	8003ca4 <_sbrk_r>
 800365a:	1c43      	adds	r3, r0, #1
 800365c:	d123      	bne.n	80036a6 <_malloc_r+0x92>
 800365e:	230c      	movs	r3, #12
 8003660:	4630      	mov	r0, r6
 8003662:	6033      	str	r3, [r6, #0]
 8003664:	f000 fe28 	bl	80042b8 <__malloc_unlock>
 8003668:	e7e3      	b.n	8003632 <_malloc_r+0x1e>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	1b5b      	subs	r3, r3, r5
 800366e:	d417      	bmi.n	80036a0 <_malloc_r+0x8c>
 8003670:	2b0b      	cmp	r3, #11
 8003672:	d903      	bls.n	800367c <_malloc_r+0x68>
 8003674:	6023      	str	r3, [r4, #0]
 8003676:	441c      	add	r4, r3
 8003678:	6025      	str	r5, [r4, #0]
 800367a:	e004      	b.n	8003686 <_malloc_r+0x72>
 800367c:	6863      	ldr	r3, [r4, #4]
 800367e:	42a2      	cmp	r2, r4
 8003680:	bf0c      	ite	eq
 8003682:	600b      	streq	r3, [r1, #0]
 8003684:	6053      	strne	r3, [r2, #4]
 8003686:	4630      	mov	r0, r6
 8003688:	f000 fe16 	bl	80042b8 <__malloc_unlock>
 800368c:	f104 000b 	add.w	r0, r4, #11
 8003690:	1d23      	adds	r3, r4, #4
 8003692:	f020 0007 	bic.w	r0, r0, #7
 8003696:	1ac2      	subs	r2, r0, r3
 8003698:	d0cc      	beq.n	8003634 <_malloc_r+0x20>
 800369a:	1a1b      	subs	r3, r3, r0
 800369c:	50a3      	str	r3, [r4, r2]
 800369e:	e7c9      	b.n	8003634 <_malloc_r+0x20>
 80036a0:	4622      	mov	r2, r4
 80036a2:	6864      	ldr	r4, [r4, #4]
 80036a4:	e7cc      	b.n	8003640 <_malloc_r+0x2c>
 80036a6:	1cc4      	adds	r4, r0, #3
 80036a8:	f024 0403 	bic.w	r4, r4, #3
 80036ac:	42a0      	cmp	r0, r4
 80036ae:	d0e3      	beq.n	8003678 <_malloc_r+0x64>
 80036b0:	1a21      	subs	r1, r4, r0
 80036b2:	4630      	mov	r0, r6
 80036b4:	f000 faf6 	bl	8003ca4 <_sbrk_r>
 80036b8:	3001      	adds	r0, #1
 80036ba:	d1dd      	bne.n	8003678 <_malloc_r+0x64>
 80036bc:	e7cf      	b.n	800365e <_malloc_r+0x4a>
 80036be:	bf00      	nop
 80036c0:	20000090 	.word	0x20000090
 80036c4:	20000094 	.word	0x20000094

080036c8 <__sfputc_r>:
 80036c8:	6893      	ldr	r3, [r2, #8]
 80036ca:	b410      	push	{r4}
 80036cc:	3b01      	subs	r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	6093      	str	r3, [r2, #8]
 80036d2:	da07      	bge.n	80036e4 <__sfputc_r+0x1c>
 80036d4:	6994      	ldr	r4, [r2, #24]
 80036d6:	42a3      	cmp	r3, r4
 80036d8:	db01      	blt.n	80036de <__sfputc_r+0x16>
 80036da:	290a      	cmp	r1, #10
 80036dc:	d102      	bne.n	80036e4 <__sfputc_r+0x1c>
 80036de:	bc10      	pop	{r4}
 80036e0:	f000 baf0 	b.w	8003cc4 <__swbuf_r>
 80036e4:	6813      	ldr	r3, [r2, #0]
 80036e6:	1c58      	adds	r0, r3, #1
 80036e8:	6010      	str	r0, [r2, #0]
 80036ea:	7019      	strb	r1, [r3, #0]
 80036ec:	4608      	mov	r0, r1
 80036ee:	bc10      	pop	{r4}
 80036f0:	4770      	bx	lr

080036f2 <__sfputs_r>:
 80036f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f4:	4606      	mov	r6, r0
 80036f6:	460f      	mov	r7, r1
 80036f8:	4614      	mov	r4, r2
 80036fa:	18d5      	adds	r5, r2, r3
 80036fc:	42ac      	cmp	r4, r5
 80036fe:	d101      	bne.n	8003704 <__sfputs_r+0x12>
 8003700:	2000      	movs	r0, #0
 8003702:	e007      	b.n	8003714 <__sfputs_r+0x22>
 8003704:	463a      	mov	r2, r7
 8003706:	4630      	mov	r0, r6
 8003708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800370c:	f7ff ffdc 	bl	80036c8 <__sfputc_r>
 8003710:	1c43      	adds	r3, r0, #1
 8003712:	d1f3      	bne.n	80036fc <__sfputs_r+0xa>
 8003714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003718 <_vfiprintf_r>:
 8003718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371c:	460d      	mov	r5, r1
 800371e:	4614      	mov	r4, r2
 8003720:	4698      	mov	r8, r3
 8003722:	4606      	mov	r6, r0
 8003724:	b09d      	sub	sp, #116	; 0x74
 8003726:	b118      	cbz	r0, 8003730 <_vfiprintf_r+0x18>
 8003728:	6983      	ldr	r3, [r0, #24]
 800372a:	b90b      	cbnz	r3, 8003730 <_vfiprintf_r+0x18>
 800372c:	f000 fcac 	bl	8004088 <__sinit>
 8003730:	4b89      	ldr	r3, [pc, #548]	; (8003958 <_vfiprintf_r+0x240>)
 8003732:	429d      	cmp	r5, r3
 8003734:	d11b      	bne.n	800376e <_vfiprintf_r+0x56>
 8003736:	6875      	ldr	r5, [r6, #4]
 8003738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800373a:	07d9      	lsls	r1, r3, #31
 800373c:	d405      	bmi.n	800374a <_vfiprintf_r+0x32>
 800373e:	89ab      	ldrh	r3, [r5, #12]
 8003740:	059a      	lsls	r2, r3, #22
 8003742:	d402      	bmi.n	800374a <_vfiprintf_r+0x32>
 8003744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003746:	f000 fd3d 	bl	80041c4 <__retarget_lock_acquire_recursive>
 800374a:	89ab      	ldrh	r3, [r5, #12]
 800374c:	071b      	lsls	r3, r3, #28
 800374e:	d501      	bpl.n	8003754 <_vfiprintf_r+0x3c>
 8003750:	692b      	ldr	r3, [r5, #16]
 8003752:	b9eb      	cbnz	r3, 8003790 <_vfiprintf_r+0x78>
 8003754:	4629      	mov	r1, r5
 8003756:	4630      	mov	r0, r6
 8003758:	f000 fb06 	bl	8003d68 <__swsetup_r>
 800375c:	b1c0      	cbz	r0, 8003790 <_vfiprintf_r+0x78>
 800375e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003760:	07dc      	lsls	r4, r3, #31
 8003762:	d50e      	bpl.n	8003782 <_vfiprintf_r+0x6a>
 8003764:	f04f 30ff 	mov.w	r0, #4294967295
 8003768:	b01d      	add	sp, #116	; 0x74
 800376a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800376e:	4b7b      	ldr	r3, [pc, #492]	; (800395c <_vfiprintf_r+0x244>)
 8003770:	429d      	cmp	r5, r3
 8003772:	d101      	bne.n	8003778 <_vfiprintf_r+0x60>
 8003774:	68b5      	ldr	r5, [r6, #8]
 8003776:	e7df      	b.n	8003738 <_vfiprintf_r+0x20>
 8003778:	4b79      	ldr	r3, [pc, #484]	; (8003960 <_vfiprintf_r+0x248>)
 800377a:	429d      	cmp	r5, r3
 800377c:	bf08      	it	eq
 800377e:	68f5      	ldreq	r5, [r6, #12]
 8003780:	e7da      	b.n	8003738 <_vfiprintf_r+0x20>
 8003782:	89ab      	ldrh	r3, [r5, #12]
 8003784:	0598      	lsls	r0, r3, #22
 8003786:	d4ed      	bmi.n	8003764 <_vfiprintf_r+0x4c>
 8003788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800378a:	f000 fd1c 	bl	80041c6 <__retarget_lock_release_recursive>
 800378e:	e7e9      	b.n	8003764 <_vfiprintf_r+0x4c>
 8003790:	2300      	movs	r3, #0
 8003792:	9309      	str	r3, [sp, #36]	; 0x24
 8003794:	2320      	movs	r3, #32
 8003796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800379a:	2330      	movs	r3, #48	; 0x30
 800379c:	f04f 0901 	mov.w	r9, #1
 80037a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80037a4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003964 <_vfiprintf_r+0x24c>
 80037a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037ac:	4623      	mov	r3, r4
 80037ae:	469a      	mov	sl, r3
 80037b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037b4:	b10a      	cbz	r2, 80037ba <_vfiprintf_r+0xa2>
 80037b6:	2a25      	cmp	r2, #37	; 0x25
 80037b8:	d1f9      	bne.n	80037ae <_vfiprintf_r+0x96>
 80037ba:	ebba 0b04 	subs.w	fp, sl, r4
 80037be:	d00b      	beq.n	80037d8 <_vfiprintf_r+0xc0>
 80037c0:	465b      	mov	r3, fp
 80037c2:	4622      	mov	r2, r4
 80037c4:	4629      	mov	r1, r5
 80037c6:	4630      	mov	r0, r6
 80037c8:	f7ff ff93 	bl	80036f2 <__sfputs_r>
 80037cc:	3001      	adds	r0, #1
 80037ce:	f000 80aa 	beq.w	8003926 <_vfiprintf_r+0x20e>
 80037d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037d4:	445a      	add	r2, fp
 80037d6:	9209      	str	r2, [sp, #36]	; 0x24
 80037d8:	f89a 3000 	ldrb.w	r3, [sl]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 80a2 	beq.w	8003926 <_vfiprintf_r+0x20e>
 80037e2:	2300      	movs	r3, #0
 80037e4:	f04f 32ff 	mov.w	r2, #4294967295
 80037e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037ec:	f10a 0a01 	add.w	sl, sl, #1
 80037f0:	9304      	str	r3, [sp, #16]
 80037f2:	9307      	str	r3, [sp, #28]
 80037f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037f8:	931a      	str	r3, [sp, #104]	; 0x68
 80037fa:	4654      	mov	r4, sl
 80037fc:	2205      	movs	r2, #5
 80037fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003802:	4858      	ldr	r0, [pc, #352]	; (8003964 <_vfiprintf_r+0x24c>)
 8003804:	f000 fd44 	bl	8004290 <memchr>
 8003808:	9a04      	ldr	r2, [sp, #16]
 800380a:	b9d8      	cbnz	r0, 8003844 <_vfiprintf_r+0x12c>
 800380c:	06d1      	lsls	r1, r2, #27
 800380e:	bf44      	itt	mi
 8003810:	2320      	movmi	r3, #32
 8003812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003816:	0713      	lsls	r3, r2, #28
 8003818:	bf44      	itt	mi
 800381a:	232b      	movmi	r3, #43	; 0x2b
 800381c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003820:	f89a 3000 	ldrb.w	r3, [sl]
 8003824:	2b2a      	cmp	r3, #42	; 0x2a
 8003826:	d015      	beq.n	8003854 <_vfiprintf_r+0x13c>
 8003828:	4654      	mov	r4, sl
 800382a:	2000      	movs	r0, #0
 800382c:	f04f 0c0a 	mov.w	ip, #10
 8003830:	9a07      	ldr	r2, [sp, #28]
 8003832:	4621      	mov	r1, r4
 8003834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003838:	3b30      	subs	r3, #48	; 0x30
 800383a:	2b09      	cmp	r3, #9
 800383c:	d94e      	bls.n	80038dc <_vfiprintf_r+0x1c4>
 800383e:	b1b0      	cbz	r0, 800386e <_vfiprintf_r+0x156>
 8003840:	9207      	str	r2, [sp, #28]
 8003842:	e014      	b.n	800386e <_vfiprintf_r+0x156>
 8003844:	eba0 0308 	sub.w	r3, r0, r8
 8003848:	fa09 f303 	lsl.w	r3, r9, r3
 800384c:	4313      	orrs	r3, r2
 800384e:	46a2      	mov	sl, r4
 8003850:	9304      	str	r3, [sp, #16]
 8003852:	e7d2      	b.n	80037fa <_vfiprintf_r+0xe2>
 8003854:	9b03      	ldr	r3, [sp, #12]
 8003856:	1d19      	adds	r1, r3, #4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	9103      	str	r1, [sp, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	bfbb      	ittet	lt
 8003860:	425b      	neglt	r3, r3
 8003862:	f042 0202 	orrlt.w	r2, r2, #2
 8003866:	9307      	strge	r3, [sp, #28]
 8003868:	9307      	strlt	r3, [sp, #28]
 800386a:	bfb8      	it	lt
 800386c:	9204      	strlt	r2, [sp, #16]
 800386e:	7823      	ldrb	r3, [r4, #0]
 8003870:	2b2e      	cmp	r3, #46	; 0x2e
 8003872:	d10c      	bne.n	800388e <_vfiprintf_r+0x176>
 8003874:	7863      	ldrb	r3, [r4, #1]
 8003876:	2b2a      	cmp	r3, #42	; 0x2a
 8003878:	d135      	bne.n	80038e6 <_vfiprintf_r+0x1ce>
 800387a:	9b03      	ldr	r3, [sp, #12]
 800387c:	3402      	adds	r4, #2
 800387e:	1d1a      	adds	r2, r3, #4
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	9203      	str	r2, [sp, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	bfb8      	it	lt
 8003888:	f04f 33ff 	movlt.w	r3, #4294967295
 800388c:	9305      	str	r3, [sp, #20]
 800388e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003974 <_vfiprintf_r+0x25c>
 8003892:	2203      	movs	r2, #3
 8003894:	4650      	mov	r0, sl
 8003896:	7821      	ldrb	r1, [r4, #0]
 8003898:	f000 fcfa 	bl	8004290 <memchr>
 800389c:	b140      	cbz	r0, 80038b0 <_vfiprintf_r+0x198>
 800389e:	2340      	movs	r3, #64	; 0x40
 80038a0:	eba0 000a 	sub.w	r0, r0, sl
 80038a4:	fa03 f000 	lsl.w	r0, r3, r0
 80038a8:	9b04      	ldr	r3, [sp, #16]
 80038aa:	3401      	adds	r4, #1
 80038ac:	4303      	orrs	r3, r0
 80038ae:	9304      	str	r3, [sp, #16]
 80038b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038b4:	2206      	movs	r2, #6
 80038b6:	482c      	ldr	r0, [pc, #176]	; (8003968 <_vfiprintf_r+0x250>)
 80038b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038bc:	f000 fce8 	bl	8004290 <memchr>
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d03f      	beq.n	8003944 <_vfiprintf_r+0x22c>
 80038c4:	4b29      	ldr	r3, [pc, #164]	; (800396c <_vfiprintf_r+0x254>)
 80038c6:	bb1b      	cbnz	r3, 8003910 <_vfiprintf_r+0x1f8>
 80038c8:	9b03      	ldr	r3, [sp, #12]
 80038ca:	3307      	adds	r3, #7
 80038cc:	f023 0307 	bic.w	r3, r3, #7
 80038d0:	3308      	adds	r3, #8
 80038d2:	9303      	str	r3, [sp, #12]
 80038d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038d6:	443b      	add	r3, r7
 80038d8:	9309      	str	r3, [sp, #36]	; 0x24
 80038da:	e767      	b.n	80037ac <_vfiprintf_r+0x94>
 80038dc:	460c      	mov	r4, r1
 80038de:	2001      	movs	r0, #1
 80038e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80038e4:	e7a5      	b.n	8003832 <_vfiprintf_r+0x11a>
 80038e6:	2300      	movs	r3, #0
 80038e8:	f04f 0c0a 	mov.w	ip, #10
 80038ec:	4619      	mov	r1, r3
 80038ee:	3401      	adds	r4, #1
 80038f0:	9305      	str	r3, [sp, #20]
 80038f2:	4620      	mov	r0, r4
 80038f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038f8:	3a30      	subs	r2, #48	; 0x30
 80038fa:	2a09      	cmp	r2, #9
 80038fc:	d903      	bls.n	8003906 <_vfiprintf_r+0x1ee>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0c5      	beq.n	800388e <_vfiprintf_r+0x176>
 8003902:	9105      	str	r1, [sp, #20]
 8003904:	e7c3      	b.n	800388e <_vfiprintf_r+0x176>
 8003906:	4604      	mov	r4, r0
 8003908:	2301      	movs	r3, #1
 800390a:	fb0c 2101 	mla	r1, ip, r1, r2
 800390e:	e7f0      	b.n	80038f2 <_vfiprintf_r+0x1da>
 8003910:	ab03      	add	r3, sp, #12
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	462a      	mov	r2, r5
 8003916:	4630      	mov	r0, r6
 8003918:	4b15      	ldr	r3, [pc, #84]	; (8003970 <_vfiprintf_r+0x258>)
 800391a:	a904      	add	r1, sp, #16
 800391c:	f3af 8000 	nop.w
 8003920:	4607      	mov	r7, r0
 8003922:	1c78      	adds	r0, r7, #1
 8003924:	d1d6      	bne.n	80038d4 <_vfiprintf_r+0x1bc>
 8003926:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003928:	07d9      	lsls	r1, r3, #31
 800392a:	d405      	bmi.n	8003938 <_vfiprintf_r+0x220>
 800392c:	89ab      	ldrh	r3, [r5, #12]
 800392e:	059a      	lsls	r2, r3, #22
 8003930:	d402      	bmi.n	8003938 <_vfiprintf_r+0x220>
 8003932:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003934:	f000 fc47 	bl	80041c6 <__retarget_lock_release_recursive>
 8003938:	89ab      	ldrh	r3, [r5, #12]
 800393a:	065b      	lsls	r3, r3, #25
 800393c:	f53f af12 	bmi.w	8003764 <_vfiprintf_r+0x4c>
 8003940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003942:	e711      	b.n	8003768 <_vfiprintf_r+0x50>
 8003944:	ab03      	add	r3, sp, #12
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	462a      	mov	r2, r5
 800394a:	4630      	mov	r0, r6
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <_vfiprintf_r+0x258>)
 800394e:	a904      	add	r1, sp, #16
 8003950:	f000 f882 	bl	8003a58 <_printf_i>
 8003954:	e7e4      	b.n	8003920 <_vfiprintf_r+0x208>
 8003956:	bf00      	nop
 8003958:	080045e8 	.word	0x080045e8
 800395c:	08004608 	.word	0x08004608
 8003960:	080045c8 	.word	0x080045c8
 8003964:	08004592 	.word	0x08004592
 8003968:	0800459c 	.word	0x0800459c
 800396c:	00000000 	.word	0x00000000
 8003970:	080036f3 	.word	0x080036f3
 8003974:	08004598 	.word	0x08004598

08003978 <_printf_common>:
 8003978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800397c:	4616      	mov	r6, r2
 800397e:	4699      	mov	r9, r3
 8003980:	688a      	ldr	r2, [r1, #8]
 8003982:	690b      	ldr	r3, [r1, #16]
 8003984:	4607      	mov	r7, r0
 8003986:	4293      	cmp	r3, r2
 8003988:	bfb8      	it	lt
 800398a:	4613      	movlt	r3, r2
 800398c:	6033      	str	r3, [r6, #0]
 800398e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003992:	460c      	mov	r4, r1
 8003994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003998:	b10a      	cbz	r2, 800399e <_printf_common+0x26>
 800399a:	3301      	adds	r3, #1
 800399c:	6033      	str	r3, [r6, #0]
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	0699      	lsls	r1, r3, #26
 80039a2:	bf42      	ittt	mi
 80039a4:	6833      	ldrmi	r3, [r6, #0]
 80039a6:	3302      	addmi	r3, #2
 80039a8:	6033      	strmi	r3, [r6, #0]
 80039aa:	6825      	ldr	r5, [r4, #0]
 80039ac:	f015 0506 	ands.w	r5, r5, #6
 80039b0:	d106      	bne.n	80039c0 <_printf_common+0x48>
 80039b2:	f104 0a19 	add.w	sl, r4, #25
 80039b6:	68e3      	ldr	r3, [r4, #12]
 80039b8:	6832      	ldr	r2, [r6, #0]
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	42ab      	cmp	r3, r5
 80039be:	dc28      	bgt.n	8003a12 <_printf_common+0x9a>
 80039c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039c4:	1e13      	subs	r3, r2, #0
 80039c6:	6822      	ldr	r2, [r4, #0]
 80039c8:	bf18      	it	ne
 80039ca:	2301      	movne	r3, #1
 80039cc:	0692      	lsls	r2, r2, #26
 80039ce:	d42d      	bmi.n	8003a2c <_printf_common+0xb4>
 80039d0:	4649      	mov	r1, r9
 80039d2:	4638      	mov	r0, r7
 80039d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039d8:	47c0      	blx	r8
 80039da:	3001      	adds	r0, #1
 80039dc:	d020      	beq.n	8003a20 <_printf_common+0xa8>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	68e5      	ldr	r5, [r4, #12]
 80039e2:	f003 0306 	and.w	r3, r3, #6
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	bf18      	it	ne
 80039ea:	2500      	movne	r5, #0
 80039ec:	6832      	ldr	r2, [r6, #0]
 80039ee:	f04f 0600 	mov.w	r6, #0
 80039f2:	68a3      	ldr	r3, [r4, #8]
 80039f4:	bf08      	it	eq
 80039f6:	1aad      	subeq	r5, r5, r2
 80039f8:	6922      	ldr	r2, [r4, #16]
 80039fa:	bf08      	it	eq
 80039fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a00:	4293      	cmp	r3, r2
 8003a02:	bfc4      	itt	gt
 8003a04:	1a9b      	subgt	r3, r3, r2
 8003a06:	18ed      	addgt	r5, r5, r3
 8003a08:	341a      	adds	r4, #26
 8003a0a:	42b5      	cmp	r5, r6
 8003a0c:	d11a      	bne.n	8003a44 <_printf_common+0xcc>
 8003a0e:	2000      	movs	r0, #0
 8003a10:	e008      	b.n	8003a24 <_printf_common+0xac>
 8003a12:	2301      	movs	r3, #1
 8003a14:	4652      	mov	r2, sl
 8003a16:	4649      	mov	r1, r9
 8003a18:	4638      	mov	r0, r7
 8003a1a:	47c0      	blx	r8
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d103      	bne.n	8003a28 <_printf_common+0xb0>
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295
 8003a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a28:	3501      	adds	r5, #1
 8003a2a:	e7c4      	b.n	80039b6 <_printf_common+0x3e>
 8003a2c:	2030      	movs	r0, #48	; 0x30
 8003a2e:	18e1      	adds	r1, r4, r3
 8003a30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a3a:	4422      	add	r2, r4
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a42:	e7c5      	b.n	80039d0 <_printf_common+0x58>
 8003a44:	2301      	movs	r3, #1
 8003a46:	4622      	mov	r2, r4
 8003a48:	4649      	mov	r1, r9
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	47c0      	blx	r8
 8003a4e:	3001      	adds	r0, #1
 8003a50:	d0e6      	beq.n	8003a20 <_printf_common+0xa8>
 8003a52:	3601      	adds	r6, #1
 8003a54:	e7d9      	b.n	8003a0a <_printf_common+0x92>
	...

08003a58 <_printf_i>:
 8003a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a5c:	460c      	mov	r4, r1
 8003a5e:	7e27      	ldrb	r7, [r4, #24]
 8003a60:	4691      	mov	r9, r2
 8003a62:	2f78      	cmp	r7, #120	; 0x78
 8003a64:	4680      	mov	r8, r0
 8003a66:	469a      	mov	sl, r3
 8003a68:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a6e:	d807      	bhi.n	8003a80 <_printf_i+0x28>
 8003a70:	2f62      	cmp	r7, #98	; 0x62
 8003a72:	d80a      	bhi.n	8003a8a <_printf_i+0x32>
 8003a74:	2f00      	cmp	r7, #0
 8003a76:	f000 80d9 	beq.w	8003c2c <_printf_i+0x1d4>
 8003a7a:	2f58      	cmp	r7, #88	; 0x58
 8003a7c:	f000 80a4 	beq.w	8003bc8 <_printf_i+0x170>
 8003a80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a88:	e03a      	b.n	8003b00 <_printf_i+0xa8>
 8003a8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a8e:	2b15      	cmp	r3, #21
 8003a90:	d8f6      	bhi.n	8003a80 <_printf_i+0x28>
 8003a92:	a001      	add	r0, pc, #4	; (adr r0, 8003a98 <_printf_i+0x40>)
 8003a94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a98:	08003af1 	.word	0x08003af1
 8003a9c:	08003b05 	.word	0x08003b05
 8003aa0:	08003a81 	.word	0x08003a81
 8003aa4:	08003a81 	.word	0x08003a81
 8003aa8:	08003a81 	.word	0x08003a81
 8003aac:	08003a81 	.word	0x08003a81
 8003ab0:	08003b05 	.word	0x08003b05
 8003ab4:	08003a81 	.word	0x08003a81
 8003ab8:	08003a81 	.word	0x08003a81
 8003abc:	08003a81 	.word	0x08003a81
 8003ac0:	08003a81 	.word	0x08003a81
 8003ac4:	08003c13 	.word	0x08003c13
 8003ac8:	08003b35 	.word	0x08003b35
 8003acc:	08003bf5 	.word	0x08003bf5
 8003ad0:	08003a81 	.word	0x08003a81
 8003ad4:	08003a81 	.word	0x08003a81
 8003ad8:	08003c35 	.word	0x08003c35
 8003adc:	08003a81 	.word	0x08003a81
 8003ae0:	08003b35 	.word	0x08003b35
 8003ae4:	08003a81 	.word	0x08003a81
 8003ae8:	08003a81 	.word	0x08003a81
 8003aec:	08003bfd 	.word	0x08003bfd
 8003af0:	680b      	ldr	r3, [r1, #0]
 8003af2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003af6:	1d1a      	adds	r2, r3, #4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	600a      	str	r2, [r1, #0]
 8003afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0a4      	b.n	8003c4e <_printf_i+0x1f6>
 8003b04:	6825      	ldr	r5, [r4, #0]
 8003b06:	6808      	ldr	r0, [r1, #0]
 8003b08:	062e      	lsls	r6, r5, #24
 8003b0a:	f100 0304 	add.w	r3, r0, #4
 8003b0e:	d50a      	bpl.n	8003b26 <_printf_i+0xce>
 8003b10:	6805      	ldr	r5, [r0, #0]
 8003b12:	600b      	str	r3, [r1, #0]
 8003b14:	2d00      	cmp	r5, #0
 8003b16:	da03      	bge.n	8003b20 <_printf_i+0xc8>
 8003b18:	232d      	movs	r3, #45	; 0x2d
 8003b1a:	426d      	negs	r5, r5
 8003b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b20:	230a      	movs	r3, #10
 8003b22:	485e      	ldr	r0, [pc, #376]	; (8003c9c <_printf_i+0x244>)
 8003b24:	e019      	b.n	8003b5a <_printf_i+0x102>
 8003b26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b2a:	6805      	ldr	r5, [r0, #0]
 8003b2c:	600b      	str	r3, [r1, #0]
 8003b2e:	bf18      	it	ne
 8003b30:	b22d      	sxthne	r5, r5
 8003b32:	e7ef      	b.n	8003b14 <_printf_i+0xbc>
 8003b34:	680b      	ldr	r3, [r1, #0]
 8003b36:	6825      	ldr	r5, [r4, #0]
 8003b38:	1d18      	adds	r0, r3, #4
 8003b3a:	6008      	str	r0, [r1, #0]
 8003b3c:	0628      	lsls	r0, r5, #24
 8003b3e:	d501      	bpl.n	8003b44 <_printf_i+0xec>
 8003b40:	681d      	ldr	r5, [r3, #0]
 8003b42:	e002      	b.n	8003b4a <_printf_i+0xf2>
 8003b44:	0669      	lsls	r1, r5, #25
 8003b46:	d5fb      	bpl.n	8003b40 <_printf_i+0xe8>
 8003b48:	881d      	ldrh	r5, [r3, #0]
 8003b4a:	2f6f      	cmp	r7, #111	; 0x6f
 8003b4c:	bf0c      	ite	eq
 8003b4e:	2308      	moveq	r3, #8
 8003b50:	230a      	movne	r3, #10
 8003b52:	4852      	ldr	r0, [pc, #328]	; (8003c9c <_printf_i+0x244>)
 8003b54:	2100      	movs	r1, #0
 8003b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b5a:	6866      	ldr	r6, [r4, #4]
 8003b5c:	2e00      	cmp	r6, #0
 8003b5e:	bfa8      	it	ge
 8003b60:	6821      	ldrge	r1, [r4, #0]
 8003b62:	60a6      	str	r6, [r4, #8]
 8003b64:	bfa4      	itt	ge
 8003b66:	f021 0104 	bicge.w	r1, r1, #4
 8003b6a:	6021      	strge	r1, [r4, #0]
 8003b6c:	b90d      	cbnz	r5, 8003b72 <_printf_i+0x11a>
 8003b6e:	2e00      	cmp	r6, #0
 8003b70:	d04d      	beq.n	8003c0e <_printf_i+0x1b6>
 8003b72:	4616      	mov	r6, r2
 8003b74:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b78:	fb03 5711 	mls	r7, r3, r1, r5
 8003b7c:	5dc7      	ldrb	r7, [r0, r7]
 8003b7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b82:	462f      	mov	r7, r5
 8003b84:	42bb      	cmp	r3, r7
 8003b86:	460d      	mov	r5, r1
 8003b88:	d9f4      	bls.n	8003b74 <_printf_i+0x11c>
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d10b      	bne.n	8003ba6 <_printf_i+0x14e>
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	07df      	lsls	r7, r3, #31
 8003b92:	d508      	bpl.n	8003ba6 <_printf_i+0x14e>
 8003b94:	6923      	ldr	r3, [r4, #16]
 8003b96:	6861      	ldr	r1, [r4, #4]
 8003b98:	4299      	cmp	r1, r3
 8003b9a:	bfde      	ittt	le
 8003b9c:	2330      	movle	r3, #48	; 0x30
 8003b9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ba2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ba6:	1b92      	subs	r2, r2, r6
 8003ba8:	6122      	str	r2, [r4, #16]
 8003baa:	464b      	mov	r3, r9
 8003bac:	4621      	mov	r1, r4
 8003bae:	4640      	mov	r0, r8
 8003bb0:	f8cd a000 	str.w	sl, [sp]
 8003bb4:	aa03      	add	r2, sp, #12
 8003bb6:	f7ff fedf 	bl	8003978 <_printf_common>
 8003bba:	3001      	adds	r0, #1
 8003bbc:	d14c      	bne.n	8003c58 <_printf_i+0x200>
 8003bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc2:	b004      	add	sp, #16
 8003bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc8:	4834      	ldr	r0, [pc, #208]	; (8003c9c <_printf_i+0x244>)
 8003bca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003bce:	680e      	ldr	r6, [r1, #0]
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003bd6:	061f      	lsls	r7, r3, #24
 8003bd8:	600e      	str	r6, [r1, #0]
 8003bda:	d514      	bpl.n	8003c06 <_printf_i+0x1ae>
 8003bdc:	07d9      	lsls	r1, r3, #31
 8003bde:	bf44      	itt	mi
 8003be0:	f043 0320 	orrmi.w	r3, r3, #32
 8003be4:	6023      	strmi	r3, [r4, #0]
 8003be6:	b91d      	cbnz	r5, 8003bf0 <_printf_i+0x198>
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	f023 0320 	bic.w	r3, r3, #32
 8003bee:	6023      	str	r3, [r4, #0]
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	e7af      	b.n	8003b54 <_printf_i+0xfc>
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	f043 0320 	orr.w	r3, r3, #32
 8003bfa:	6023      	str	r3, [r4, #0]
 8003bfc:	2378      	movs	r3, #120	; 0x78
 8003bfe:	4828      	ldr	r0, [pc, #160]	; (8003ca0 <_printf_i+0x248>)
 8003c00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c04:	e7e3      	b.n	8003bce <_printf_i+0x176>
 8003c06:	065e      	lsls	r6, r3, #25
 8003c08:	bf48      	it	mi
 8003c0a:	b2ad      	uxthmi	r5, r5
 8003c0c:	e7e6      	b.n	8003bdc <_printf_i+0x184>
 8003c0e:	4616      	mov	r6, r2
 8003c10:	e7bb      	b.n	8003b8a <_printf_i+0x132>
 8003c12:	680b      	ldr	r3, [r1, #0]
 8003c14:	6826      	ldr	r6, [r4, #0]
 8003c16:	1d1d      	adds	r5, r3, #4
 8003c18:	6960      	ldr	r0, [r4, #20]
 8003c1a:	600d      	str	r5, [r1, #0]
 8003c1c:	0635      	lsls	r5, r6, #24
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	d501      	bpl.n	8003c26 <_printf_i+0x1ce>
 8003c22:	6018      	str	r0, [r3, #0]
 8003c24:	e002      	b.n	8003c2c <_printf_i+0x1d4>
 8003c26:	0671      	lsls	r1, r6, #25
 8003c28:	d5fb      	bpl.n	8003c22 <_printf_i+0x1ca>
 8003c2a:	8018      	strh	r0, [r3, #0]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	4616      	mov	r6, r2
 8003c30:	6123      	str	r3, [r4, #16]
 8003c32:	e7ba      	b.n	8003baa <_printf_i+0x152>
 8003c34:	680b      	ldr	r3, [r1, #0]
 8003c36:	1d1a      	adds	r2, r3, #4
 8003c38:	600a      	str	r2, [r1, #0]
 8003c3a:	681e      	ldr	r6, [r3, #0]
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4630      	mov	r0, r6
 8003c40:	6862      	ldr	r2, [r4, #4]
 8003c42:	f000 fb25 	bl	8004290 <memchr>
 8003c46:	b108      	cbz	r0, 8003c4c <_printf_i+0x1f4>
 8003c48:	1b80      	subs	r0, r0, r6
 8003c4a:	6060      	str	r0, [r4, #4]
 8003c4c:	6863      	ldr	r3, [r4, #4]
 8003c4e:	6123      	str	r3, [r4, #16]
 8003c50:	2300      	movs	r3, #0
 8003c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c56:	e7a8      	b.n	8003baa <_printf_i+0x152>
 8003c58:	4632      	mov	r2, r6
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	6923      	ldr	r3, [r4, #16]
 8003c60:	47d0      	blx	sl
 8003c62:	3001      	adds	r0, #1
 8003c64:	d0ab      	beq.n	8003bbe <_printf_i+0x166>
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	079b      	lsls	r3, r3, #30
 8003c6a:	d413      	bmi.n	8003c94 <_printf_i+0x23c>
 8003c6c:	68e0      	ldr	r0, [r4, #12]
 8003c6e:	9b03      	ldr	r3, [sp, #12]
 8003c70:	4298      	cmp	r0, r3
 8003c72:	bfb8      	it	lt
 8003c74:	4618      	movlt	r0, r3
 8003c76:	e7a4      	b.n	8003bc2 <_printf_i+0x16a>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	4632      	mov	r2, r6
 8003c7c:	4649      	mov	r1, r9
 8003c7e:	4640      	mov	r0, r8
 8003c80:	47d0      	blx	sl
 8003c82:	3001      	adds	r0, #1
 8003c84:	d09b      	beq.n	8003bbe <_printf_i+0x166>
 8003c86:	3501      	adds	r5, #1
 8003c88:	68e3      	ldr	r3, [r4, #12]
 8003c8a:	9903      	ldr	r1, [sp, #12]
 8003c8c:	1a5b      	subs	r3, r3, r1
 8003c8e:	42ab      	cmp	r3, r5
 8003c90:	dcf2      	bgt.n	8003c78 <_printf_i+0x220>
 8003c92:	e7eb      	b.n	8003c6c <_printf_i+0x214>
 8003c94:	2500      	movs	r5, #0
 8003c96:	f104 0619 	add.w	r6, r4, #25
 8003c9a:	e7f5      	b.n	8003c88 <_printf_i+0x230>
 8003c9c:	080045a3 	.word	0x080045a3
 8003ca0:	080045b4 	.word	0x080045b4

08003ca4 <_sbrk_r>:
 8003ca4:	b538      	push	{r3, r4, r5, lr}
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	4d05      	ldr	r5, [pc, #20]	; (8003cc0 <_sbrk_r+0x1c>)
 8003caa:	4604      	mov	r4, r0
 8003cac:	4608      	mov	r0, r1
 8003cae:	602b      	str	r3, [r5, #0]
 8003cb0:	f7fd fa4a 	bl	8001148 <_sbrk>
 8003cb4:	1c43      	adds	r3, r0, #1
 8003cb6:	d102      	bne.n	8003cbe <_sbrk_r+0x1a>
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	b103      	cbz	r3, 8003cbe <_sbrk_r+0x1a>
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	200033c8 	.word	0x200033c8

08003cc4 <__swbuf_r>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	460e      	mov	r6, r1
 8003cc8:	4614      	mov	r4, r2
 8003cca:	4605      	mov	r5, r0
 8003ccc:	b118      	cbz	r0, 8003cd6 <__swbuf_r+0x12>
 8003cce:	6983      	ldr	r3, [r0, #24]
 8003cd0:	b90b      	cbnz	r3, 8003cd6 <__swbuf_r+0x12>
 8003cd2:	f000 f9d9 	bl	8004088 <__sinit>
 8003cd6:	4b21      	ldr	r3, [pc, #132]	; (8003d5c <__swbuf_r+0x98>)
 8003cd8:	429c      	cmp	r4, r3
 8003cda:	d12b      	bne.n	8003d34 <__swbuf_r+0x70>
 8003cdc:	686c      	ldr	r4, [r5, #4]
 8003cde:	69a3      	ldr	r3, [r4, #24]
 8003ce0:	60a3      	str	r3, [r4, #8]
 8003ce2:	89a3      	ldrh	r3, [r4, #12]
 8003ce4:	071a      	lsls	r2, r3, #28
 8003ce6:	d52f      	bpl.n	8003d48 <__swbuf_r+0x84>
 8003ce8:	6923      	ldr	r3, [r4, #16]
 8003cea:	b36b      	cbz	r3, 8003d48 <__swbuf_r+0x84>
 8003cec:	6923      	ldr	r3, [r4, #16]
 8003cee:	6820      	ldr	r0, [r4, #0]
 8003cf0:	b2f6      	uxtb	r6, r6
 8003cf2:	1ac0      	subs	r0, r0, r3
 8003cf4:	6963      	ldr	r3, [r4, #20]
 8003cf6:	4637      	mov	r7, r6
 8003cf8:	4283      	cmp	r3, r0
 8003cfa:	dc04      	bgt.n	8003d06 <__swbuf_r+0x42>
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f000 f92e 	bl	8003f60 <_fflush_r>
 8003d04:	bb30      	cbnz	r0, 8003d54 <__swbuf_r+0x90>
 8003d06:	68a3      	ldr	r3, [r4, #8]
 8003d08:	3001      	adds	r0, #1
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	60a3      	str	r3, [r4, #8]
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	6022      	str	r2, [r4, #0]
 8003d14:	701e      	strb	r6, [r3, #0]
 8003d16:	6963      	ldr	r3, [r4, #20]
 8003d18:	4283      	cmp	r3, r0
 8003d1a:	d004      	beq.n	8003d26 <__swbuf_r+0x62>
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	07db      	lsls	r3, r3, #31
 8003d20:	d506      	bpl.n	8003d30 <__swbuf_r+0x6c>
 8003d22:	2e0a      	cmp	r6, #10
 8003d24:	d104      	bne.n	8003d30 <__swbuf_r+0x6c>
 8003d26:	4621      	mov	r1, r4
 8003d28:	4628      	mov	r0, r5
 8003d2a:	f000 f919 	bl	8003f60 <_fflush_r>
 8003d2e:	b988      	cbnz	r0, 8003d54 <__swbuf_r+0x90>
 8003d30:	4638      	mov	r0, r7
 8003d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d34:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <__swbuf_r+0x9c>)
 8003d36:	429c      	cmp	r4, r3
 8003d38:	d101      	bne.n	8003d3e <__swbuf_r+0x7a>
 8003d3a:	68ac      	ldr	r4, [r5, #8]
 8003d3c:	e7cf      	b.n	8003cde <__swbuf_r+0x1a>
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <__swbuf_r+0xa0>)
 8003d40:	429c      	cmp	r4, r3
 8003d42:	bf08      	it	eq
 8003d44:	68ec      	ldreq	r4, [r5, #12]
 8003d46:	e7ca      	b.n	8003cde <__swbuf_r+0x1a>
 8003d48:	4621      	mov	r1, r4
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f000 f80c 	bl	8003d68 <__swsetup_r>
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d0cb      	beq.n	8003cec <__swbuf_r+0x28>
 8003d54:	f04f 37ff 	mov.w	r7, #4294967295
 8003d58:	e7ea      	b.n	8003d30 <__swbuf_r+0x6c>
 8003d5a:	bf00      	nop
 8003d5c:	080045e8 	.word	0x080045e8
 8003d60:	08004608 	.word	0x08004608
 8003d64:	080045c8 	.word	0x080045c8

08003d68 <__swsetup_r>:
 8003d68:	4b32      	ldr	r3, [pc, #200]	; (8003e34 <__swsetup_r+0xcc>)
 8003d6a:	b570      	push	{r4, r5, r6, lr}
 8003d6c:	681d      	ldr	r5, [r3, #0]
 8003d6e:	4606      	mov	r6, r0
 8003d70:	460c      	mov	r4, r1
 8003d72:	b125      	cbz	r5, 8003d7e <__swsetup_r+0x16>
 8003d74:	69ab      	ldr	r3, [r5, #24]
 8003d76:	b913      	cbnz	r3, 8003d7e <__swsetup_r+0x16>
 8003d78:	4628      	mov	r0, r5
 8003d7a:	f000 f985 	bl	8004088 <__sinit>
 8003d7e:	4b2e      	ldr	r3, [pc, #184]	; (8003e38 <__swsetup_r+0xd0>)
 8003d80:	429c      	cmp	r4, r3
 8003d82:	d10f      	bne.n	8003da4 <__swsetup_r+0x3c>
 8003d84:	686c      	ldr	r4, [r5, #4]
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d8c:	0719      	lsls	r1, r3, #28
 8003d8e:	d42c      	bmi.n	8003dea <__swsetup_r+0x82>
 8003d90:	06dd      	lsls	r5, r3, #27
 8003d92:	d411      	bmi.n	8003db8 <__swsetup_r+0x50>
 8003d94:	2309      	movs	r3, #9
 8003d96:	6033      	str	r3, [r6, #0]
 8003d98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003da0:	81a3      	strh	r3, [r4, #12]
 8003da2:	e03e      	b.n	8003e22 <__swsetup_r+0xba>
 8003da4:	4b25      	ldr	r3, [pc, #148]	; (8003e3c <__swsetup_r+0xd4>)
 8003da6:	429c      	cmp	r4, r3
 8003da8:	d101      	bne.n	8003dae <__swsetup_r+0x46>
 8003daa:	68ac      	ldr	r4, [r5, #8]
 8003dac:	e7eb      	b.n	8003d86 <__swsetup_r+0x1e>
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <__swsetup_r+0xd8>)
 8003db0:	429c      	cmp	r4, r3
 8003db2:	bf08      	it	eq
 8003db4:	68ec      	ldreq	r4, [r5, #12]
 8003db6:	e7e6      	b.n	8003d86 <__swsetup_r+0x1e>
 8003db8:	0758      	lsls	r0, r3, #29
 8003dba:	d512      	bpl.n	8003de2 <__swsetup_r+0x7a>
 8003dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dbe:	b141      	cbz	r1, 8003dd2 <__swsetup_r+0x6a>
 8003dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dc4:	4299      	cmp	r1, r3
 8003dc6:	d002      	beq.n	8003dce <__swsetup_r+0x66>
 8003dc8:	4630      	mov	r0, r6
 8003dca:	f7ff fbd7 	bl	800357c <_free_r>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	6363      	str	r3, [r4, #52]	; 0x34
 8003dd2:	89a3      	ldrh	r3, [r4, #12]
 8003dd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003dd8:	81a3      	strh	r3, [r4, #12]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	6063      	str	r3, [r4, #4]
 8003dde:	6923      	ldr	r3, [r4, #16]
 8003de0:	6023      	str	r3, [r4, #0]
 8003de2:	89a3      	ldrh	r3, [r4, #12]
 8003de4:	f043 0308 	orr.w	r3, r3, #8
 8003de8:	81a3      	strh	r3, [r4, #12]
 8003dea:	6923      	ldr	r3, [r4, #16]
 8003dec:	b94b      	cbnz	r3, 8003e02 <__swsetup_r+0x9a>
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df8:	d003      	beq.n	8003e02 <__swsetup_r+0x9a>
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	f000 fa07 	bl	8004210 <__smakebuf_r>
 8003e02:	89a0      	ldrh	r0, [r4, #12]
 8003e04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e08:	f010 0301 	ands.w	r3, r0, #1
 8003e0c:	d00a      	beq.n	8003e24 <__swsetup_r+0xbc>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60a3      	str	r3, [r4, #8]
 8003e12:	6963      	ldr	r3, [r4, #20]
 8003e14:	425b      	negs	r3, r3
 8003e16:	61a3      	str	r3, [r4, #24]
 8003e18:	6923      	ldr	r3, [r4, #16]
 8003e1a:	b943      	cbnz	r3, 8003e2e <__swsetup_r+0xc6>
 8003e1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e20:	d1ba      	bne.n	8003d98 <__swsetup_r+0x30>
 8003e22:	bd70      	pop	{r4, r5, r6, pc}
 8003e24:	0781      	lsls	r1, r0, #30
 8003e26:	bf58      	it	pl
 8003e28:	6963      	ldrpl	r3, [r4, #20]
 8003e2a:	60a3      	str	r3, [r4, #8]
 8003e2c:	e7f4      	b.n	8003e18 <__swsetup_r+0xb0>
 8003e2e:	2000      	movs	r0, #0
 8003e30:	e7f7      	b.n	8003e22 <__swsetup_r+0xba>
 8003e32:	bf00      	nop
 8003e34:	2000000c 	.word	0x2000000c
 8003e38:	080045e8 	.word	0x080045e8
 8003e3c:	08004608 	.word	0x08004608
 8003e40:	080045c8 	.word	0x080045c8

08003e44 <abort>:
 8003e44:	2006      	movs	r0, #6
 8003e46:	b508      	push	{r3, lr}
 8003e48:	f000 fa64 	bl	8004314 <raise>
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	f7fd f908 	bl	8001062 <_exit>
	...

08003e54 <__sflush_r>:
 8003e54:	898a      	ldrh	r2, [r1, #12]
 8003e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	0710      	lsls	r0, r2, #28
 8003e5e:	460c      	mov	r4, r1
 8003e60:	d458      	bmi.n	8003f14 <__sflush_r+0xc0>
 8003e62:	684b      	ldr	r3, [r1, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	dc05      	bgt.n	8003e74 <__sflush_r+0x20>
 8003e68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	dc02      	bgt.n	8003e74 <__sflush_r+0x20>
 8003e6e:	2000      	movs	r0, #0
 8003e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e76:	2e00      	cmp	r6, #0
 8003e78:	d0f9      	beq.n	8003e6e <__sflush_r+0x1a>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e80:	682f      	ldr	r7, [r5, #0]
 8003e82:	602b      	str	r3, [r5, #0]
 8003e84:	d032      	beq.n	8003eec <__sflush_r+0x98>
 8003e86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	075a      	lsls	r2, r3, #29
 8003e8c:	d505      	bpl.n	8003e9a <__sflush_r+0x46>
 8003e8e:	6863      	ldr	r3, [r4, #4]
 8003e90:	1ac0      	subs	r0, r0, r3
 8003e92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e94:	b10b      	cbz	r3, 8003e9a <__sflush_r+0x46>
 8003e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e98:	1ac0      	subs	r0, r0, r3
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	6a21      	ldr	r1, [r4, #32]
 8003ea4:	47b0      	blx	r6
 8003ea6:	1c43      	adds	r3, r0, #1
 8003ea8:	89a3      	ldrh	r3, [r4, #12]
 8003eaa:	d106      	bne.n	8003eba <__sflush_r+0x66>
 8003eac:	6829      	ldr	r1, [r5, #0]
 8003eae:	291d      	cmp	r1, #29
 8003eb0:	d82c      	bhi.n	8003f0c <__sflush_r+0xb8>
 8003eb2:	4a2a      	ldr	r2, [pc, #168]	; (8003f5c <__sflush_r+0x108>)
 8003eb4:	40ca      	lsrs	r2, r1
 8003eb6:	07d6      	lsls	r6, r2, #31
 8003eb8:	d528      	bpl.n	8003f0c <__sflush_r+0xb8>
 8003eba:	2200      	movs	r2, #0
 8003ebc:	6062      	str	r2, [r4, #4]
 8003ebe:	6922      	ldr	r2, [r4, #16]
 8003ec0:	04d9      	lsls	r1, r3, #19
 8003ec2:	6022      	str	r2, [r4, #0]
 8003ec4:	d504      	bpl.n	8003ed0 <__sflush_r+0x7c>
 8003ec6:	1c42      	adds	r2, r0, #1
 8003ec8:	d101      	bne.n	8003ece <__sflush_r+0x7a>
 8003eca:	682b      	ldr	r3, [r5, #0]
 8003ecc:	b903      	cbnz	r3, 8003ed0 <__sflush_r+0x7c>
 8003ece:	6560      	str	r0, [r4, #84]	; 0x54
 8003ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ed2:	602f      	str	r7, [r5, #0]
 8003ed4:	2900      	cmp	r1, #0
 8003ed6:	d0ca      	beq.n	8003e6e <__sflush_r+0x1a>
 8003ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003edc:	4299      	cmp	r1, r3
 8003ede:	d002      	beq.n	8003ee6 <__sflush_r+0x92>
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f7ff fb4b 	bl	800357c <_free_r>
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8003eea:	e7c1      	b.n	8003e70 <__sflush_r+0x1c>
 8003eec:	6a21      	ldr	r1, [r4, #32]
 8003eee:	2301      	movs	r3, #1
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	47b0      	blx	r6
 8003ef4:	1c41      	adds	r1, r0, #1
 8003ef6:	d1c7      	bne.n	8003e88 <__sflush_r+0x34>
 8003ef8:	682b      	ldr	r3, [r5, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0c4      	beq.n	8003e88 <__sflush_r+0x34>
 8003efe:	2b1d      	cmp	r3, #29
 8003f00:	d001      	beq.n	8003f06 <__sflush_r+0xb2>
 8003f02:	2b16      	cmp	r3, #22
 8003f04:	d101      	bne.n	8003f0a <__sflush_r+0xb6>
 8003f06:	602f      	str	r7, [r5, #0]
 8003f08:	e7b1      	b.n	8003e6e <__sflush_r+0x1a>
 8003f0a:	89a3      	ldrh	r3, [r4, #12]
 8003f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f10:	81a3      	strh	r3, [r4, #12]
 8003f12:	e7ad      	b.n	8003e70 <__sflush_r+0x1c>
 8003f14:	690f      	ldr	r7, [r1, #16]
 8003f16:	2f00      	cmp	r7, #0
 8003f18:	d0a9      	beq.n	8003e6e <__sflush_r+0x1a>
 8003f1a:	0793      	lsls	r3, r2, #30
 8003f1c:	bf18      	it	ne
 8003f1e:	2300      	movne	r3, #0
 8003f20:	680e      	ldr	r6, [r1, #0]
 8003f22:	bf08      	it	eq
 8003f24:	694b      	ldreq	r3, [r1, #20]
 8003f26:	eba6 0807 	sub.w	r8, r6, r7
 8003f2a:	600f      	str	r7, [r1, #0]
 8003f2c:	608b      	str	r3, [r1, #8]
 8003f2e:	f1b8 0f00 	cmp.w	r8, #0
 8003f32:	dd9c      	ble.n	8003e6e <__sflush_r+0x1a>
 8003f34:	4643      	mov	r3, r8
 8003f36:	463a      	mov	r2, r7
 8003f38:	4628      	mov	r0, r5
 8003f3a:	6a21      	ldr	r1, [r4, #32]
 8003f3c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f3e:	47b0      	blx	r6
 8003f40:	2800      	cmp	r0, #0
 8003f42:	dc06      	bgt.n	8003f52 <__sflush_r+0xfe>
 8003f44:	89a3      	ldrh	r3, [r4, #12]
 8003f46:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f4e:	81a3      	strh	r3, [r4, #12]
 8003f50:	e78e      	b.n	8003e70 <__sflush_r+0x1c>
 8003f52:	4407      	add	r7, r0
 8003f54:	eba8 0800 	sub.w	r8, r8, r0
 8003f58:	e7e9      	b.n	8003f2e <__sflush_r+0xda>
 8003f5a:	bf00      	nop
 8003f5c:	20400001 	.word	0x20400001

08003f60 <_fflush_r>:
 8003f60:	b538      	push	{r3, r4, r5, lr}
 8003f62:	690b      	ldr	r3, [r1, #16]
 8003f64:	4605      	mov	r5, r0
 8003f66:	460c      	mov	r4, r1
 8003f68:	b913      	cbnz	r3, 8003f70 <_fflush_r+0x10>
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	bd38      	pop	{r3, r4, r5, pc}
 8003f70:	b118      	cbz	r0, 8003f7a <_fflush_r+0x1a>
 8003f72:	6983      	ldr	r3, [r0, #24]
 8003f74:	b90b      	cbnz	r3, 8003f7a <_fflush_r+0x1a>
 8003f76:	f000 f887 	bl	8004088 <__sinit>
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <_fflush_r+0x6c>)
 8003f7c:	429c      	cmp	r4, r3
 8003f7e:	d11b      	bne.n	8003fb8 <_fflush_r+0x58>
 8003f80:	686c      	ldr	r4, [r5, #4]
 8003f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0ef      	beq.n	8003f6a <_fflush_r+0xa>
 8003f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f8c:	07d0      	lsls	r0, r2, #31
 8003f8e:	d404      	bmi.n	8003f9a <_fflush_r+0x3a>
 8003f90:	0599      	lsls	r1, r3, #22
 8003f92:	d402      	bmi.n	8003f9a <_fflush_r+0x3a>
 8003f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f96:	f000 f915 	bl	80041c4 <__retarget_lock_acquire_recursive>
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	f7ff ff59 	bl	8003e54 <__sflush_r>
 8003fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fa4:	4605      	mov	r5, r0
 8003fa6:	07da      	lsls	r2, r3, #31
 8003fa8:	d4e0      	bmi.n	8003f6c <_fflush_r+0xc>
 8003faa:	89a3      	ldrh	r3, [r4, #12]
 8003fac:	059b      	lsls	r3, r3, #22
 8003fae:	d4dd      	bmi.n	8003f6c <_fflush_r+0xc>
 8003fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fb2:	f000 f908 	bl	80041c6 <__retarget_lock_release_recursive>
 8003fb6:	e7d9      	b.n	8003f6c <_fflush_r+0xc>
 8003fb8:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <_fflush_r+0x70>)
 8003fba:	429c      	cmp	r4, r3
 8003fbc:	d101      	bne.n	8003fc2 <_fflush_r+0x62>
 8003fbe:	68ac      	ldr	r4, [r5, #8]
 8003fc0:	e7df      	b.n	8003f82 <_fflush_r+0x22>
 8003fc2:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <_fflush_r+0x74>)
 8003fc4:	429c      	cmp	r4, r3
 8003fc6:	bf08      	it	eq
 8003fc8:	68ec      	ldreq	r4, [r5, #12]
 8003fca:	e7da      	b.n	8003f82 <_fflush_r+0x22>
 8003fcc:	080045e8 	.word	0x080045e8
 8003fd0:	08004608 	.word	0x08004608
 8003fd4:	080045c8 	.word	0x080045c8

08003fd8 <std>:
 8003fd8:	2300      	movs	r3, #0
 8003fda:	b510      	push	{r4, lr}
 8003fdc:	4604      	mov	r4, r0
 8003fde:	e9c0 3300 	strd	r3, r3, [r0]
 8003fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fe6:	6083      	str	r3, [r0, #8]
 8003fe8:	8181      	strh	r1, [r0, #12]
 8003fea:	6643      	str	r3, [r0, #100]	; 0x64
 8003fec:	81c2      	strh	r2, [r0, #14]
 8003fee:	6183      	str	r3, [r0, #24]
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	2208      	movs	r2, #8
 8003ff4:	305c      	adds	r0, #92	; 0x5c
 8003ff6:	f7ff fa13 	bl	8003420 <memset>
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <std+0x38>)
 8003ffc:	6224      	str	r4, [r4, #32]
 8003ffe:	6263      	str	r3, [r4, #36]	; 0x24
 8004000:	4b04      	ldr	r3, [pc, #16]	; (8004014 <std+0x3c>)
 8004002:	62a3      	str	r3, [r4, #40]	; 0x28
 8004004:	4b04      	ldr	r3, [pc, #16]	; (8004018 <std+0x40>)
 8004006:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <std+0x44>)
 800400a:	6323      	str	r3, [r4, #48]	; 0x30
 800400c:	bd10      	pop	{r4, pc}
 800400e:	bf00      	nop
 8004010:	0800434d 	.word	0x0800434d
 8004014:	0800436f 	.word	0x0800436f
 8004018:	080043a7 	.word	0x080043a7
 800401c:	080043cb 	.word	0x080043cb

08004020 <_cleanup_r>:
 8004020:	4901      	ldr	r1, [pc, #4]	; (8004028 <_cleanup_r+0x8>)
 8004022:	f000 b8af 	b.w	8004184 <_fwalk_reent>
 8004026:	bf00      	nop
 8004028:	08003f61 	.word	0x08003f61

0800402c <__sfmoreglue>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	2568      	movs	r5, #104	; 0x68
 8004030:	1e4a      	subs	r2, r1, #1
 8004032:	4355      	muls	r5, r2
 8004034:	460e      	mov	r6, r1
 8004036:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800403a:	f7ff faeb 	bl	8003614 <_malloc_r>
 800403e:	4604      	mov	r4, r0
 8004040:	b140      	cbz	r0, 8004054 <__sfmoreglue+0x28>
 8004042:	2100      	movs	r1, #0
 8004044:	e9c0 1600 	strd	r1, r6, [r0]
 8004048:	300c      	adds	r0, #12
 800404a:	60a0      	str	r0, [r4, #8]
 800404c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004050:	f7ff f9e6 	bl	8003420 <memset>
 8004054:	4620      	mov	r0, r4
 8004056:	bd70      	pop	{r4, r5, r6, pc}

08004058 <__sfp_lock_acquire>:
 8004058:	4801      	ldr	r0, [pc, #4]	; (8004060 <__sfp_lock_acquire+0x8>)
 800405a:	f000 b8b3 	b.w	80041c4 <__retarget_lock_acquire_recursive>
 800405e:	bf00      	nop
 8004060:	200033c4 	.word	0x200033c4

08004064 <__sfp_lock_release>:
 8004064:	4801      	ldr	r0, [pc, #4]	; (800406c <__sfp_lock_release+0x8>)
 8004066:	f000 b8ae 	b.w	80041c6 <__retarget_lock_release_recursive>
 800406a:	bf00      	nop
 800406c:	200033c4 	.word	0x200033c4

08004070 <__sinit_lock_acquire>:
 8004070:	4801      	ldr	r0, [pc, #4]	; (8004078 <__sinit_lock_acquire+0x8>)
 8004072:	f000 b8a7 	b.w	80041c4 <__retarget_lock_acquire_recursive>
 8004076:	bf00      	nop
 8004078:	200033bf 	.word	0x200033bf

0800407c <__sinit_lock_release>:
 800407c:	4801      	ldr	r0, [pc, #4]	; (8004084 <__sinit_lock_release+0x8>)
 800407e:	f000 b8a2 	b.w	80041c6 <__retarget_lock_release_recursive>
 8004082:	bf00      	nop
 8004084:	200033bf 	.word	0x200033bf

08004088 <__sinit>:
 8004088:	b510      	push	{r4, lr}
 800408a:	4604      	mov	r4, r0
 800408c:	f7ff fff0 	bl	8004070 <__sinit_lock_acquire>
 8004090:	69a3      	ldr	r3, [r4, #24]
 8004092:	b11b      	cbz	r3, 800409c <__sinit+0x14>
 8004094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004098:	f7ff bff0 	b.w	800407c <__sinit_lock_release>
 800409c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80040a0:	6523      	str	r3, [r4, #80]	; 0x50
 80040a2:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <__sinit+0x68>)
 80040a4:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <__sinit+0x6c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80040aa:	42a3      	cmp	r3, r4
 80040ac:	bf08      	it	eq
 80040ae:	2301      	moveq	r3, #1
 80040b0:	4620      	mov	r0, r4
 80040b2:	bf08      	it	eq
 80040b4:	61a3      	streq	r3, [r4, #24]
 80040b6:	f000 f81f 	bl	80040f8 <__sfp>
 80040ba:	6060      	str	r0, [r4, #4]
 80040bc:	4620      	mov	r0, r4
 80040be:	f000 f81b 	bl	80040f8 <__sfp>
 80040c2:	60a0      	str	r0, [r4, #8]
 80040c4:	4620      	mov	r0, r4
 80040c6:	f000 f817 	bl	80040f8 <__sfp>
 80040ca:	2200      	movs	r2, #0
 80040cc:	2104      	movs	r1, #4
 80040ce:	60e0      	str	r0, [r4, #12]
 80040d0:	6860      	ldr	r0, [r4, #4]
 80040d2:	f7ff ff81 	bl	8003fd8 <std>
 80040d6:	2201      	movs	r2, #1
 80040d8:	2109      	movs	r1, #9
 80040da:	68a0      	ldr	r0, [r4, #8]
 80040dc:	f7ff ff7c 	bl	8003fd8 <std>
 80040e0:	2202      	movs	r2, #2
 80040e2:	2112      	movs	r1, #18
 80040e4:	68e0      	ldr	r0, [r4, #12]
 80040e6:	f7ff ff77 	bl	8003fd8 <std>
 80040ea:	2301      	movs	r3, #1
 80040ec:	61a3      	str	r3, [r4, #24]
 80040ee:	e7d1      	b.n	8004094 <__sinit+0xc>
 80040f0:	080044dc 	.word	0x080044dc
 80040f4:	08004021 	.word	0x08004021

080040f8 <__sfp>:
 80040f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fa:	4607      	mov	r7, r0
 80040fc:	f7ff ffac 	bl	8004058 <__sfp_lock_acquire>
 8004100:	4b1e      	ldr	r3, [pc, #120]	; (800417c <__sfp+0x84>)
 8004102:	681e      	ldr	r6, [r3, #0]
 8004104:	69b3      	ldr	r3, [r6, #24]
 8004106:	b913      	cbnz	r3, 800410e <__sfp+0x16>
 8004108:	4630      	mov	r0, r6
 800410a:	f7ff ffbd 	bl	8004088 <__sinit>
 800410e:	3648      	adds	r6, #72	; 0x48
 8004110:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004114:	3b01      	subs	r3, #1
 8004116:	d503      	bpl.n	8004120 <__sfp+0x28>
 8004118:	6833      	ldr	r3, [r6, #0]
 800411a:	b30b      	cbz	r3, 8004160 <__sfp+0x68>
 800411c:	6836      	ldr	r6, [r6, #0]
 800411e:	e7f7      	b.n	8004110 <__sfp+0x18>
 8004120:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004124:	b9d5      	cbnz	r5, 800415c <__sfp+0x64>
 8004126:	4b16      	ldr	r3, [pc, #88]	; (8004180 <__sfp+0x88>)
 8004128:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800412c:	60e3      	str	r3, [r4, #12]
 800412e:	6665      	str	r5, [r4, #100]	; 0x64
 8004130:	f000 f847 	bl	80041c2 <__retarget_lock_init_recursive>
 8004134:	f7ff ff96 	bl	8004064 <__sfp_lock_release>
 8004138:	2208      	movs	r2, #8
 800413a:	4629      	mov	r1, r5
 800413c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004140:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004144:	6025      	str	r5, [r4, #0]
 8004146:	61a5      	str	r5, [r4, #24]
 8004148:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800414c:	f7ff f968 	bl	8003420 <memset>
 8004150:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004154:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004158:	4620      	mov	r0, r4
 800415a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800415c:	3468      	adds	r4, #104	; 0x68
 800415e:	e7d9      	b.n	8004114 <__sfp+0x1c>
 8004160:	2104      	movs	r1, #4
 8004162:	4638      	mov	r0, r7
 8004164:	f7ff ff62 	bl	800402c <__sfmoreglue>
 8004168:	4604      	mov	r4, r0
 800416a:	6030      	str	r0, [r6, #0]
 800416c:	2800      	cmp	r0, #0
 800416e:	d1d5      	bne.n	800411c <__sfp+0x24>
 8004170:	f7ff ff78 	bl	8004064 <__sfp_lock_release>
 8004174:	230c      	movs	r3, #12
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	e7ee      	b.n	8004158 <__sfp+0x60>
 800417a:	bf00      	nop
 800417c:	080044dc 	.word	0x080044dc
 8004180:	ffff0001 	.word	0xffff0001

08004184 <_fwalk_reent>:
 8004184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004188:	4606      	mov	r6, r0
 800418a:	4688      	mov	r8, r1
 800418c:	2700      	movs	r7, #0
 800418e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004192:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004196:	f1b9 0901 	subs.w	r9, r9, #1
 800419a:	d505      	bpl.n	80041a8 <_fwalk_reent+0x24>
 800419c:	6824      	ldr	r4, [r4, #0]
 800419e:	2c00      	cmp	r4, #0
 80041a0:	d1f7      	bne.n	8004192 <_fwalk_reent+0xe>
 80041a2:	4638      	mov	r0, r7
 80041a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041a8:	89ab      	ldrh	r3, [r5, #12]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d907      	bls.n	80041be <_fwalk_reent+0x3a>
 80041ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041b2:	3301      	adds	r3, #1
 80041b4:	d003      	beq.n	80041be <_fwalk_reent+0x3a>
 80041b6:	4629      	mov	r1, r5
 80041b8:	4630      	mov	r0, r6
 80041ba:	47c0      	blx	r8
 80041bc:	4307      	orrs	r7, r0
 80041be:	3568      	adds	r5, #104	; 0x68
 80041c0:	e7e9      	b.n	8004196 <_fwalk_reent+0x12>

080041c2 <__retarget_lock_init_recursive>:
 80041c2:	4770      	bx	lr

080041c4 <__retarget_lock_acquire_recursive>:
 80041c4:	4770      	bx	lr

080041c6 <__retarget_lock_release_recursive>:
 80041c6:	4770      	bx	lr

080041c8 <__swhatbuf_r>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	460e      	mov	r6, r1
 80041cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d0:	4614      	mov	r4, r2
 80041d2:	2900      	cmp	r1, #0
 80041d4:	461d      	mov	r5, r3
 80041d6:	b096      	sub	sp, #88	; 0x58
 80041d8:	da07      	bge.n	80041ea <__swhatbuf_r+0x22>
 80041da:	2300      	movs	r3, #0
 80041dc:	602b      	str	r3, [r5, #0]
 80041de:	89b3      	ldrh	r3, [r6, #12]
 80041e0:	061a      	lsls	r2, r3, #24
 80041e2:	d410      	bmi.n	8004206 <__swhatbuf_r+0x3e>
 80041e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041e8:	e00e      	b.n	8004208 <__swhatbuf_r+0x40>
 80041ea:	466a      	mov	r2, sp
 80041ec:	f000 f914 	bl	8004418 <_fstat_r>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	dbf2      	blt.n	80041da <__swhatbuf_r+0x12>
 80041f4:	9a01      	ldr	r2, [sp, #4]
 80041f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80041fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80041fe:	425a      	negs	r2, r3
 8004200:	415a      	adcs	r2, r3
 8004202:	602a      	str	r2, [r5, #0]
 8004204:	e7ee      	b.n	80041e4 <__swhatbuf_r+0x1c>
 8004206:	2340      	movs	r3, #64	; 0x40
 8004208:	2000      	movs	r0, #0
 800420a:	6023      	str	r3, [r4, #0]
 800420c:	b016      	add	sp, #88	; 0x58
 800420e:	bd70      	pop	{r4, r5, r6, pc}

08004210 <__smakebuf_r>:
 8004210:	898b      	ldrh	r3, [r1, #12]
 8004212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004214:	079d      	lsls	r5, r3, #30
 8004216:	4606      	mov	r6, r0
 8004218:	460c      	mov	r4, r1
 800421a:	d507      	bpl.n	800422c <__smakebuf_r+0x1c>
 800421c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	6123      	str	r3, [r4, #16]
 8004224:	2301      	movs	r3, #1
 8004226:	6163      	str	r3, [r4, #20]
 8004228:	b002      	add	sp, #8
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	466a      	mov	r2, sp
 800422e:	ab01      	add	r3, sp, #4
 8004230:	f7ff ffca 	bl	80041c8 <__swhatbuf_r>
 8004234:	9900      	ldr	r1, [sp, #0]
 8004236:	4605      	mov	r5, r0
 8004238:	4630      	mov	r0, r6
 800423a:	f7ff f9eb 	bl	8003614 <_malloc_r>
 800423e:	b948      	cbnz	r0, 8004254 <__smakebuf_r+0x44>
 8004240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004244:	059a      	lsls	r2, r3, #22
 8004246:	d4ef      	bmi.n	8004228 <__smakebuf_r+0x18>
 8004248:	f023 0303 	bic.w	r3, r3, #3
 800424c:	f043 0302 	orr.w	r3, r3, #2
 8004250:	81a3      	strh	r3, [r4, #12]
 8004252:	e7e3      	b.n	800421c <__smakebuf_r+0xc>
 8004254:	4b0d      	ldr	r3, [pc, #52]	; (800428c <__smakebuf_r+0x7c>)
 8004256:	62b3      	str	r3, [r6, #40]	; 0x28
 8004258:	89a3      	ldrh	r3, [r4, #12]
 800425a:	6020      	str	r0, [r4, #0]
 800425c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004260:	81a3      	strh	r3, [r4, #12]
 8004262:	9b00      	ldr	r3, [sp, #0]
 8004264:	6120      	str	r0, [r4, #16]
 8004266:	6163      	str	r3, [r4, #20]
 8004268:	9b01      	ldr	r3, [sp, #4]
 800426a:	b15b      	cbz	r3, 8004284 <__smakebuf_r+0x74>
 800426c:	4630      	mov	r0, r6
 800426e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004272:	f000 f8e3 	bl	800443c <_isatty_r>
 8004276:	b128      	cbz	r0, 8004284 <__smakebuf_r+0x74>
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	81a3      	strh	r3, [r4, #12]
 8004284:	89a0      	ldrh	r0, [r4, #12]
 8004286:	4305      	orrs	r5, r0
 8004288:	81a5      	strh	r5, [r4, #12]
 800428a:	e7cd      	b.n	8004228 <__smakebuf_r+0x18>
 800428c:	08004021 	.word	0x08004021

08004290 <memchr>:
 8004290:	4603      	mov	r3, r0
 8004292:	b510      	push	{r4, lr}
 8004294:	b2c9      	uxtb	r1, r1
 8004296:	4402      	add	r2, r0
 8004298:	4293      	cmp	r3, r2
 800429a:	4618      	mov	r0, r3
 800429c:	d101      	bne.n	80042a2 <memchr+0x12>
 800429e:	2000      	movs	r0, #0
 80042a0:	e003      	b.n	80042aa <memchr+0x1a>
 80042a2:	7804      	ldrb	r4, [r0, #0]
 80042a4:	3301      	adds	r3, #1
 80042a6:	428c      	cmp	r4, r1
 80042a8:	d1f6      	bne.n	8004298 <memchr+0x8>
 80042aa:	bd10      	pop	{r4, pc}

080042ac <__malloc_lock>:
 80042ac:	4801      	ldr	r0, [pc, #4]	; (80042b4 <__malloc_lock+0x8>)
 80042ae:	f7ff bf89 	b.w	80041c4 <__retarget_lock_acquire_recursive>
 80042b2:	bf00      	nop
 80042b4:	200033c0 	.word	0x200033c0

080042b8 <__malloc_unlock>:
 80042b8:	4801      	ldr	r0, [pc, #4]	; (80042c0 <__malloc_unlock+0x8>)
 80042ba:	f7ff bf84 	b.w	80041c6 <__retarget_lock_release_recursive>
 80042be:	bf00      	nop
 80042c0:	200033c0 	.word	0x200033c0

080042c4 <_raise_r>:
 80042c4:	291f      	cmp	r1, #31
 80042c6:	b538      	push	{r3, r4, r5, lr}
 80042c8:	4604      	mov	r4, r0
 80042ca:	460d      	mov	r5, r1
 80042cc:	d904      	bls.n	80042d8 <_raise_r+0x14>
 80042ce:	2316      	movs	r3, #22
 80042d0:	6003      	str	r3, [r0, #0]
 80042d2:	f04f 30ff 	mov.w	r0, #4294967295
 80042d6:	bd38      	pop	{r3, r4, r5, pc}
 80042d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80042da:	b112      	cbz	r2, 80042e2 <_raise_r+0x1e>
 80042dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80042e0:	b94b      	cbnz	r3, 80042f6 <_raise_r+0x32>
 80042e2:	4620      	mov	r0, r4
 80042e4:	f000 f830 	bl	8004348 <_getpid_r>
 80042e8:	462a      	mov	r2, r5
 80042ea:	4601      	mov	r1, r0
 80042ec:	4620      	mov	r0, r4
 80042ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042f2:	f000 b817 	b.w	8004324 <_kill_r>
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d00a      	beq.n	8004310 <_raise_r+0x4c>
 80042fa:	1c59      	adds	r1, r3, #1
 80042fc:	d103      	bne.n	8004306 <_raise_r+0x42>
 80042fe:	2316      	movs	r3, #22
 8004300:	6003      	str	r3, [r0, #0]
 8004302:	2001      	movs	r0, #1
 8004304:	e7e7      	b.n	80042d6 <_raise_r+0x12>
 8004306:	2400      	movs	r4, #0
 8004308:	4628      	mov	r0, r5
 800430a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800430e:	4798      	blx	r3
 8004310:	2000      	movs	r0, #0
 8004312:	e7e0      	b.n	80042d6 <_raise_r+0x12>

08004314 <raise>:
 8004314:	4b02      	ldr	r3, [pc, #8]	; (8004320 <raise+0xc>)
 8004316:	4601      	mov	r1, r0
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	f7ff bfd3 	b.w	80042c4 <_raise_r>
 800431e:	bf00      	nop
 8004320:	2000000c 	.word	0x2000000c

08004324 <_kill_r>:
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	2300      	movs	r3, #0
 8004328:	4d06      	ldr	r5, [pc, #24]	; (8004344 <_kill_r+0x20>)
 800432a:	4604      	mov	r4, r0
 800432c:	4608      	mov	r0, r1
 800432e:	4611      	mov	r1, r2
 8004330:	602b      	str	r3, [r5, #0]
 8004332:	f7fc fe86 	bl	8001042 <_kill>
 8004336:	1c43      	adds	r3, r0, #1
 8004338:	d102      	bne.n	8004340 <_kill_r+0x1c>
 800433a:	682b      	ldr	r3, [r5, #0]
 800433c:	b103      	cbz	r3, 8004340 <_kill_r+0x1c>
 800433e:	6023      	str	r3, [r4, #0]
 8004340:	bd38      	pop	{r3, r4, r5, pc}
 8004342:	bf00      	nop
 8004344:	200033c8 	.word	0x200033c8

08004348 <_getpid_r>:
 8004348:	f7fc be74 	b.w	8001034 <_getpid>

0800434c <__sread>:
 800434c:	b510      	push	{r4, lr}
 800434e:	460c      	mov	r4, r1
 8004350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004354:	f000 f894 	bl	8004480 <_read_r>
 8004358:	2800      	cmp	r0, #0
 800435a:	bfab      	itete	ge
 800435c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800435e:	89a3      	ldrhlt	r3, [r4, #12]
 8004360:	181b      	addge	r3, r3, r0
 8004362:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004366:	bfac      	ite	ge
 8004368:	6563      	strge	r3, [r4, #84]	; 0x54
 800436a:	81a3      	strhlt	r3, [r4, #12]
 800436c:	bd10      	pop	{r4, pc}

0800436e <__swrite>:
 800436e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004372:	461f      	mov	r7, r3
 8004374:	898b      	ldrh	r3, [r1, #12]
 8004376:	4605      	mov	r5, r0
 8004378:	05db      	lsls	r3, r3, #23
 800437a:	460c      	mov	r4, r1
 800437c:	4616      	mov	r6, r2
 800437e:	d505      	bpl.n	800438c <__swrite+0x1e>
 8004380:	2302      	movs	r3, #2
 8004382:	2200      	movs	r2, #0
 8004384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004388:	f000 f868 	bl	800445c <_lseek_r>
 800438c:	89a3      	ldrh	r3, [r4, #12]
 800438e:	4632      	mov	r2, r6
 8004390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004394:	81a3      	strh	r3, [r4, #12]
 8004396:	4628      	mov	r0, r5
 8004398:	463b      	mov	r3, r7
 800439a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800439e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043a2:	f000 b817 	b.w	80043d4 <_write_r>

080043a6 <__sseek>:
 80043a6:	b510      	push	{r4, lr}
 80043a8:	460c      	mov	r4, r1
 80043aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ae:	f000 f855 	bl	800445c <_lseek_r>
 80043b2:	1c43      	adds	r3, r0, #1
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	bf15      	itete	ne
 80043b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80043ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043c2:	81a3      	strheq	r3, [r4, #12]
 80043c4:	bf18      	it	ne
 80043c6:	81a3      	strhne	r3, [r4, #12]
 80043c8:	bd10      	pop	{r4, pc}

080043ca <__sclose>:
 80043ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ce:	f000 b813 	b.w	80043f8 <_close_r>
	...

080043d4 <_write_r>:
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	4604      	mov	r4, r0
 80043d8:	4608      	mov	r0, r1
 80043da:	4611      	mov	r1, r2
 80043dc:	2200      	movs	r2, #0
 80043de:	4d05      	ldr	r5, [pc, #20]	; (80043f4 <_write_r+0x20>)
 80043e0:	602a      	str	r2, [r5, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	f7fc fe64 	bl	80010b0 <_write>
 80043e8:	1c43      	adds	r3, r0, #1
 80043ea:	d102      	bne.n	80043f2 <_write_r+0x1e>
 80043ec:	682b      	ldr	r3, [r5, #0]
 80043ee:	b103      	cbz	r3, 80043f2 <_write_r+0x1e>
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	bd38      	pop	{r3, r4, r5, pc}
 80043f4:	200033c8 	.word	0x200033c8

080043f8 <_close_r>:
 80043f8:	b538      	push	{r3, r4, r5, lr}
 80043fa:	2300      	movs	r3, #0
 80043fc:	4d05      	ldr	r5, [pc, #20]	; (8004414 <_close_r+0x1c>)
 80043fe:	4604      	mov	r4, r0
 8004400:	4608      	mov	r0, r1
 8004402:	602b      	str	r3, [r5, #0]
 8004404:	f7fc fe70 	bl	80010e8 <_close>
 8004408:	1c43      	adds	r3, r0, #1
 800440a:	d102      	bne.n	8004412 <_close_r+0x1a>
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	b103      	cbz	r3, 8004412 <_close_r+0x1a>
 8004410:	6023      	str	r3, [r4, #0]
 8004412:	bd38      	pop	{r3, r4, r5, pc}
 8004414:	200033c8 	.word	0x200033c8

08004418 <_fstat_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	2300      	movs	r3, #0
 800441c:	4d06      	ldr	r5, [pc, #24]	; (8004438 <_fstat_r+0x20>)
 800441e:	4604      	mov	r4, r0
 8004420:	4608      	mov	r0, r1
 8004422:	4611      	mov	r1, r2
 8004424:	602b      	str	r3, [r5, #0]
 8004426:	f7fc fe6a 	bl	80010fe <_fstat>
 800442a:	1c43      	adds	r3, r0, #1
 800442c:	d102      	bne.n	8004434 <_fstat_r+0x1c>
 800442e:	682b      	ldr	r3, [r5, #0]
 8004430:	b103      	cbz	r3, 8004434 <_fstat_r+0x1c>
 8004432:	6023      	str	r3, [r4, #0]
 8004434:	bd38      	pop	{r3, r4, r5, pc}
 8004436:	bf00      	nop
 8004438:	200033c8 	.word	0x200033c8

0800443c <_isatty_r>:
 800443c:	b538      	push	{r3, r4, r5, lr}
 800443e:	2300      	movs	r3, #0
 8004440:	4d05      	ldr	r5, [pc, #20]	; (8004458 <_isatty_r+0x1c>)
 8004442:	4604      	mov	r4, r0
 8004444:	4608      	mov	r0, r1
 8004446:	602b      	str	r3, [r5, #0]
 8004448:	f7fc fe68 	bl	800111c <_isatty>
 800444c:	1c43      	adds	r3, r0, #1
 800444e:	d102      	bne.n	8004456 <_isatty_r+0x1a>
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	b103      	cbz	r3, 8004456 <_isatty_r+0x1a>
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	bd38      	pop	{r3, r4, r5, pc}
 8004458:	200033c8 	.word	0x200033c8

0800445c <_lseek_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	4604      	mov	r4, r0
 8004460:	4608      	mov	r0, r1
 8004462:	4611      	mov	r1, r2
 8004464:	2200      	movs	r2, #0
 8004466:	4d05      	ldr	r5, [pc, #20]	; (800447c <_lseek_r+0x20>)
 8004468:	602a      	str	r2, [r5, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	f7fc fe60 	bl	8001130 <_lseek>
 8004470:	1c43      	adds	r3, r0, #1
 8004472:	d102      	bne.n	800447a <_lseek_r+0x1e>
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	b103      	cbz	r3, 800447a <_lseek_r+0x1e>
 8004478:	6023      	str	r3, [r4, #0]
 800447a:	bd38      	pop	{r3, r4, r5, pc}
 800447c:	200033c8 	.word	0x200033c8

08004480 <_read_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4604      	mov	r4, r0
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	2200      	movs	r2, #0
 800448a:	4d05      	ldr	r5, [pc, #20]	; (80044a0 <_read_r+0x20>)
 800448c:	602a      	str	r2, [r5, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	f7fc fdf1 	bl	8001076 <_read>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d102      	bne.n	800449e <_read_r+0x1e>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	b103      	cbz	r3, 800449e <_read_r+0x1e>
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	200033c8 	.word	0x200033c8

080044a4 <_init>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	bf00      	nop
 80044a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044aa:	bc08      	pop	{r3}
 80044ac:	469e      	mov	lr, r3
 80044ae:	4770      	bx	lr

080044b0 <_fini>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	bf00      	nop
 80044b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b6:	bc08      	pop	{r3}
 80044b8:	469e      	mov	lr, r3
 80044ba:	4770      	bx	lr
